Making that discretized reference model 
=======================================

:date: 2016-03-21


Yesterday when we left off we had just built our reference model from the requirements. Now we need to discretize it and build the controller. 

Unfortunately things would not be as simple. I spent most of my day fighting a weird MATLAB bug that was preventing my ``startup.m`` file form executing. Eventually I updated MATLAB to get rid of the issue without ever understanding it. 

Back to work. I set up a new ``.mlx`` live script and got to work. First we make the reference model:

.. code-block:: matlab
    
    % Build the model. The parameter choice is explained in the previous post.
    [num, den] = ord2(12.5, 0.4);
    RefModel = tf(num, den);
        
    % discretize the model
    Ts = .05;
    RefModel_dt = c2d(RefModel, Ts, 'tustin');
    RefModel_dt.Variable = 'z^-1';

Then we can build the plant model from our data:

.. code-block:: matlab

    io_data    = load('data/dati_qr');
    model_data = load('data/modello');

    PlantModel = ss(model_data.A, model_data.B, model_data.C, model_data.D);
    PlantModel_dt = c2d(tf(PlantModel), Ts, 'tustin');
    PlantModel_dt.Variable = 'z^-1';

And the controller family: 

.. code-block:: matlab

    ControllerFamily = [
        tf(1, 1); tf(1, [1, 0]); tf([1, 0], 1)  
    ];

    ControllerFamily_dt = c2d(ControllerFamily, Ts, 'tustin');
    ControllerFamily_dt.Variable = 'z^-1';

At this point we can apply the VRFT algorithm: 

.. code-block:: matlab

    OptimalController_dt = VRFT1_ry(io_data.u1, io_data.y1, RefModel_dt, ControllerFamily_dt, [], [], []);

Click  `here <{filename}/static/03-21/matlab_work_mlx.html>`_ to view the ``.mlx`` file for the day.

Tomorrow I'll compare my controller with the controller from the previous guys and see what they have. Hopefullly it should be pretty similar. 
