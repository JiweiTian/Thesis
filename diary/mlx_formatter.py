
import sys, os
from optparse import OptionParser
from bs4 import BeautifulSoup 
from jinja2 import Environment, PackageLoader

def convert(in_file, out_file):

    # Load the template used to render the output file. 
    jinja = Environment(loader=PackageLoader('mlx_formatter', 'templates'))
    template = jinja.get_template('base.html')

    # Load the html generated by matlab and extract the parts we need.
    with open(in_file) as file:
        html_source = file.read()

    soup = BeautifulSoup(html_source, 'html.parser')
    style = soup.head.style
    sections = soup.find_all('div', 'SectionBlock')
    print('Found {} sections'.format(len(sections)))


    output_blocks = []
    for section in sections: 
        # Locate the outputs clock if it exists and move out of the tree
        outputs = section.find('div', 'inlineWrapper outputs')
        output_blocks.append({'input': section, 'output': outputs.extract() if outputs else ''})


        # For some reason the last line of the code preceding the outputs block is included in the
        # outputs. We need to grab it and move it back to the right place. 
        if outputs:
            last_code_line = outputs.find('p', 'S2 lineNode')
            if last_code_line: 
                inlineWrapper = soup.new_tag('div', **{'class': 'inlineWrapper'})
                inlineWrapper.append(last_code_line.extract())

    with open(out_file, 'w') as file:
        file.write(template.render(matlab_styles=style, sections=output_blocks))


if __name__ == '__main__':
    opts = OptionParser()
    opts.add_option('-i', '--input-file', 
        action='store', type='string', dest='in_file', help='File to be processed')
    opts.add_option('-o', '--output-file', 
        action='store', type='string', dest='out_file', help='File that will contain the new html')

    (options, args) = opts.parse_args()

    if not options.in_file and len(args) == 1: 
        options.in_file = args[0]
    else: 
        opts.print_help()

    # Generate the output path if it is not specified.
    #   given an input path /foo/bar/test.html the output will be /foo/bar/test_mlx.html
    if not options.out_file: 
        dirname, file = os.path.split(options.in_file)
        filename, ext = os.path.splitext(file)
        options.out_file = os.path.join(dirname, filename + '_mlx' + ext)

    print('Saving generated file to ', options.out_file)

    convert(options.in_file, options.out_file)
