A Nu Nu Start
=============

:date: 2016-11-14

After another long hiatus we're back and it's time for a recap.

We are trying to tune a controller for a quad-copter. We want to make it bitchingly fast. The controller structure is nested: Inner PID and outer PD. 


Right now we are trying to find a good way to find the optimal value of :math:`k`, the order of the ARX model to be used to estimate the noise model. We actually have something that works !

See the inner_vrft_tune_k_  file for this work.

Now we want to pass this into the outer vrft and see how it works. Ideally we would make a single script that can perform all the work:

- Read the data,
- Find the best value of :math:`k`,
- Do the inner VRFT,
- Do the outer VRFT
  
Back to the work: I then went back to the ``inner_vrft.mlx`` script to integrate the new results into it. We can add the k value and plot the results correctly but this brings up another issue I had forgotten about: if the complementary sensitivity has a zero with a real part greater than 1 it can't be used for the outer VRFT beacuse we need to invert it to calculate the reference signal. This means that we have to discard a bunch of controllers.

This is implemented as an extension of the previous inner_vrft_tune_k_ script. This work is in inner_vrft_tune_k_ext_.

We then plug the new :math:`k` value into the old inner VRFT script inner_vrft_ to run the vrft from scratch for the inner loop to make sure that things are working. 

Now we can go back to the outer loop to make it work. We simply plug the data from the inner loop and run the script. Things look pretty good. This is in the outer_vrft_ script.

I wondered whether we would need to handle the noise in the outer VRFT loop as well. I assume that the noise in the inner and outer loops is the same and should have the same ARX order. If I plug the extra :math:`k` parameter into the ``VRFT1_ry`` function the output changes very little so for the moment I'll leave it out. At a later time I might try to run the k-identification procedure on the outer loop as well but it seems like a premature optimisation at the moment.

From looking at the VRFT script it seems that our controller is very slow. This is to be expected. I still haven't started to try and speed it up. I'd like to find a way to make searching for the upper bound as fast as possible. 

.. _inner_vrft_tune_k : {filename}static/11-14/inner_vrft_tune_k_mlx.html
.. _inner_vrft_tune_k_ext : {filename}static/11-14/inner_vrft_tune_k_extended_mlx.html
.. _inner_vrft : {filename}static/11-14/inner_vrft_mlx.html
.. _outer_vrft : {filename}static/11-14/outer_vrft_mlx.html
