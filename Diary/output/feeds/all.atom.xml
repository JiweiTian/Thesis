<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thesis Log</title><link href="http://thesis.comkieffer.com/" rel="alternate"></link><link href="http://thesis.comkieffer.com/feeds/all.atom.xml" rel="self"></link><id>http://thesis.comkieffer.com/</id><updated>2016-11-14T00:00:00+01:00</updated><entry><title>A Nu Nu Start</title><link href="http://thesis.comkieffer.com/a-nu-nu-start.html" rel="alternate"></link><published>2016-11-14T00:00:00+01:00</published><updated>2016-11-14T00:00:00+01:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-11-14:a-nu-nu-start.html</id><summary type="html">&lt;p&gt;After another long hiatus we're back and it's time for a recap.&lt;/p&gt;
&lt;p&gt;We are trying to tune a controller for a quad-copter. We want to make it bitchingly fast. The controller structure is nested: Inner PID and outer PD.&lt;/p&gt;
&lt;p&gt;Right now we are trying to find a good way to find the optimal value of &lt;span class="math"&gt;\(k\)&lt;/span&gt;, the order of the ARX model to be used to estimate the noise model. We actually have something that works !&lt;/p&gt;
&lt;p&gt;See the &lt;a class="reference external" href="http://thesis.comkieffer.com/static/11-14/inner_vrft_tune_k_mlx.html"&gt;inner_vrft_tune_k&lt;/a&gt;  file for this work.&lt;/p&gt;
&lt;p&gt;Now we want to pass this into the outer vrft and see how it works. Ideally we would make a single script that can perform all the work:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read the data,&lt;/li&gt;
&lt;li&gt;Find the best value of &lt;span class="math"&gt;\(k\)&lt;/span&gt;,&lt;/li&gt;
&lt;li&gt;Do the inner VRFT,&lt;/li&gt;
&lt;li&gt;Do the outer VRFT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Back to the work: I then went back to the &lt;tt class="docutils literal"&gt;inner_vrft.mlx&lt;/tt&gt; script to integrate the new results into it. We can add the k value and plot the results correctly but this brings up another issue I had forgotten about: if the complementary sensitivity has a zero with a real part greater than 1 it can't be used for the outer VRFT beacuse we need to invert it to calculate the reference signal. This means that we have to discard a bunch of controllers.&lt;/p&gt;
&lt;p&gt;This is implemented as an extension of the previous &lt;a class="reference external" href="http://thesis.comkieffer.com/static/11-14/inner_vrft_tune_k_mlx.html"&gt;inner_vrft_tune_k&lt;/a&gt; script. This work is in &lt;a class="reference external" href="http://thesis.comkieffer.com/static/11-14/inner_vrft_tune_k_extended_mlx.html"&gt;inner_vrft_tune_k_ext&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We then plug the new &lt;span class="math"&gt;\(k\)&lt;/span&gt; value into the old inner VRFT script &lt;a class="reference external" href="http://thesis.comkieffer.com/static/11-14/inner_vrft_mlx.html"&gt;inner_vrft&lt;/a&gt; to run the vrft fromm scratch for the inner loop to make sure that things are working.&lt;/p&gt;
&lt;p&gt;Now we can go back to the outer loop to make it work. We simply plug the data from the inner loop and run the script. Things look pretty good. This is in the &lt;a class="reference external" href="http://thesis.comkieffer.com/static/11-14/outer_vrft_mlx.html"&gt;outer_vrft&lt;/a&gt; script.&lt;/p&gt;
&lt;p&gt;I wondered whether we would need to handle the noise in the outer VRFT loop as well. I assume that the noise in the inner and outer loops is the same and should have the same ARX order. If I plug the extra &lt;span class="math"&gt;\(k\)&lt;/span&gt; parameter into the &lt;tt class="docutils literal"&gt;VRFT1_ry&lt;/tt&gt; function the output changes very little so for the moment I'll leave it out. At a later time I might try to run the k-identification procedure on the outer loop as well but it seems like a premature optimisation at the moment.&lt;/p&gt;
&lt;p&gt;From looking at the VRFT script it seems that our controller is very slow. This is to be expected. I still haven't started to try and speed it up. I'd like to find a way to make searching for the upper bound as fast as possible.&lt;/p&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>A NU START</title><link href="http://thesis.comkieffer.com/a-nu-start.html" rel="alternate"></link><published>2016-09-12T00:00:00+02:00</published><updated>2016-09-12T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-09-12:a-nu-start.html</id><summary type="html">&lt;p&gt;After the despair and depression of the past week it's time to take a step back and be smart.&lt;/p&gt;
&lt;p&gt;I've shelved all of the previous noise work for the moment and started looking a the new scaled data I've received to see if this way I can make things work. I've lowered the bandwidth of the system significantly to ensure that I have something simple to work with.&lt;/p&gt;
&lt;p&gt;The new &lt;tt class="docutils literal"&gt;mlx&lt;/tt&gt; file for this is &lt;a class="reference external" href="http://thesis.comkieffer.com/static/09-12/inner_vrft_new_data.html"&gt;inner_vrft_new_data&lt;/a&gt;. It works Ok so far.&lt;/p&gt;
&lt;p&gt;Now we need to start looking at the noise again. This part will suck.&lt;/p&gt;
&lt;p&gt;Actually, it looks pretty good ! Check it &lt;a class="reference external" href="http://thesis.comkieffer.com/static/09-12/inner_vrft_tune_k_tau.html"&gt;out&lt;/a&gt;. It seems that the best performance is when &lt;span class="math"&gt;\(\tau = 0\)&lt;/span&gt; but that doesn't seem right.&lt;/p&gt;
&lt;p&gt;Now I just need a way to decide on which is the best. Time to ask for advice. Should I be resting for error in the step response ? In the bode plot ? Something else ?&lt;/p&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Y U NO WOOOOORK</title><link href="http://thesis.comkieffer.com/y-u-no-wooooork.html" rel="alternate"></link><published>2016-09-04T00:00:00+02:00</published><updated>2016-09-04T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-09-04:y-u-no-wooooork.html</id><summary type="html">&lt;div class="section" id="what-i-did"&gt;
&lt;h2&gt;What I did&lt;/h2&gt;
&lt;p&gt;Over the past month or so of holidays I did some work but nothing really has come out of it.&lt;/p&gt;
&lt;p&gt;We face two problems at the moment:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identifying the order (&lt;span class="math"&gt;\(k\)&lt;/span&gt;) of the noise in the input signal.&lt;/li&gt;
&lt;li&gt;Identifying the delay in the real system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The noise estimation can be done in several ways: the first is simply to run the VRFT with a bunch of different noise values and look for the best performance, otherwise we can do a proper noise estimation with the built-in MATLAB tools.&lt;/p&gt;
&lt;p&gt;However, we also need to estimate the delay in the system. Here the only real way forwards is to try a bunch of values and see what works best. We know that the noise must be a multiple of 10 ms because of the way the controller is structured (10 ms discrete time steps).&lt;/p&gt;
&lt;p&gt;I decided to consider noise orders from 1 to 25 and delays in the set &lt;span class="math"&gt;\({ 0, 10, 30, 40 } ms\)&lt;/span&gt;. This makes a total of &lt;span class="math"&gt;\(25 \times 5 = 125\)&lt;/span&gt; combinations.&lt;/p&gt;
&lt;p&gt;Of these we can discard all the ones that have zeros with magnitude larger than 1 since we need to invert the inner controller to calculate the error (&lt;span class="math"&gt;\(e_i(t)\)&lt;/span&gt;) which is used to calculate reference signal for the outer loop. All the controllers with &lt;span class="math"&gt;\(\|z_i\| &amp;gt; 1\)&lt;/span&gt; will become unstable when inverted and the reference will diverge making it useless.&lt;/p&gt;
&lt;p&gt;Of the remaining controllers none look better than the others. They all have a pretty significant error in their Bode plots compared to the reference. Clearly this wasn't working well enough.&lt;/p&gt;
&lt;p&gt;I then attempted to separate the two problems by first doing the noise estimation with built-in tools but this didn't work too well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-m-doing"&gt;
&lt;h2&gt;What I'm doing&lt;/h2&gt;
&lt;p&gt;Clearly this is going nowhere. I need to better quantify my results instead of eyeballing them. Now MATLAB is just shitting on me and I can't take it anymore.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Some time later ...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After taking a look at the VRFT tool source it looks like the noise can actually be specified as a &lt;tt class="docutils literal"&gt;[na nb]&lt;/tt&gt; vector instead of a simple &lt;tt class="docutils literal"&gt;k&lt;/tt&gt;. This means that we can actually the &lt;tt class="docutils literal"&gt;System Identification App&lt;/tt&gt; in MATLAB to try to do the noise estimation but again we see that accuracy just increases with model complexity.&lt;/p&gt;
&lt;p&gt;At this point I don't really know what to do.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Making sense of the data</title><link href="http://thesis.comkieffer.com/making-sense-of-the-data.html" rel="alternate"></link><published>2016-08-04T00:00:00+02:00</published><updated>2016-08-04T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-08-04:making-sense-of-the-data.html</id><summary type="html">&lt;p&gt;I have new information on the data ! The input signal &lt;span class="math"&gt;\(u\)&lt;/span&gt; is more than just a percentage. It is the difference in throttle between the front and the rear motor expressed in percentages.&lt;/p&gt;
&lt;p&gt;Written simply it is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    u &amp;amp;= (Throttle Front)_{\%} - (Throttle Rear)_{\%} \\
      &amp;amp;= \Omega_{F\%} - \Omega_{R\%}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;If we recall the conventions used in the previous work then:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{alignedat}{4}
    \delta \Omega_F &amp;amp;&amp;amp;= \Omega_F - \Omega_H \quad &amp;amp;&amp;amp;\Rightarrow&amp;amp;&amp;amp; \quad \Omega_F &amp;amp;&amp;amp;= \delta \Omega_F + \Omega_H\\
    \delta \Omega_R &amp;amp;&amp;amp;= \Omega_R - \Omega_H \quad &amp;amp;&amp;amp;\Rightarrow&amp;amp;&amp;amp; \quad \Omega_R &amp;amp;&amp;amp;= \delta \Omega_R + \Omega_H\\
\end{alignedat}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The control scheme imposes that &lt;span class="math"&gt;\(\delta \Omega_F = -\delta \Omega_R = \delta \Omega\)&lt;/span&gt;. By substituting this information into the previous results we arrive at:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    \Omega_F &amp;amp;= \delta \Omega + \Omega_H \\
    \Omega_R &amp;amp;= -\delta \Omega + \Omega_H
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Which allows us to rewrite the expression of the input &lt;span class="math"&gt;\(u\)&lt;/span&gt; as:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    u &amp;amp;= (\delta \Omega + \Omega_H)_{\%} - (-\delta \Omega + \Omega_H)_{\%} \\
      &amp;amp;= 2 \cdot \delta \Omega_{\%}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;However this doesn't bring us any closer to calculating the expression of &lt;span class="math"&gt;\(\delta \Omega_{\%}\)&lt;/span&gt;. Assuming that:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\delta \Omega_{\%} = \dfrac{\delta \Omega}{\delta \Omega_{Max}} \cdot 100
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Then we still need the value of &lt;span class="math"&gt;\(\delta \Omega_{Max}\)&lt;/span&gt; to make any headway.&lt;/p&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Making Progress, Again</title><link href="http://thesis.comkieffer.com/making-progress-again.html" rel="alternate"></link><published>2016-08-03T00:00:00+02:00</published><updated>2016-08-03T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-08-03:making-progress-again.html</id><summary type="html">&lt;p&gt;Full steam ahead !!&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The inner VRFT works&lt;/li&gt;
&lt;li&gt;The outer VRFT works&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="inner-vrft"&gt;
&lt;h2&gt;Inner VRFT&lt;/h2&gt;
&lt;p&gt;I'm not sure why the inner vrft works now but clearly it does. I use a second order system as a reference model since the only requirements are on damping and bandwidth. With this I can impose arbitrary bandwidth requirements and the controller seems to be able to follow rather well.&lt;/p&gt;
&lt;p&gt;However, this only works on simulated data. I do not have a set of measured data that I can use yet which makes all these results theoretical: they have no noise and no delays. Once I have experimental data I will have to adjust the code to account for that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outer-vrft"&gt;
&lt;h2&gt;Outer VRFT&lt;/h2&gt;
&lt;p&gt;The outer VRFT works fine too. Previously I was cheating and considering the inner loop as the plant and simply generating &lt;span class="math"&gt;\(\dot{q}°\)&lt;/span&gt; as a PRBS. I would then simply run &lt;tt class="docutils literal"&gt;lsim(integrator * InnerLoop, u, t)&lt;/tt&gt; and use that output. With cascade VRFTthis isn't applicable. Since the method is one shot we calculate the reference signal for the outer loop straight from the I/O data we have. This is what I do now.&lt;/p&gt;
&lt;p&gt;The performance is very impressive. With a simple second order system I can impose arbitrary bandwidth requirements and have the controller follow them.&lt;/p&gt;
&lt;p&gt;When the real data becomes available this might change however. The other thing to consider is that the performance limits of the system are driven by the upper limits on the motor torques. This will impose a hard cap on the achievable performance.&lt;/p&gt;
&lt;p&gt;As usual, here are the links to the &lt;tt class="docutils literal"&gt;mlx&lt;/tt&gt; files implementing this work:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://thesis.comkieffer.com/static/08-03/inner_vrft_mlx.html"&gt;Inner VRFT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://thesis.comkieffer.com/static/08-03/outer_vrft_mlx.html"&gt;Outer VRFT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've also decided that I should link my daily work to specific git  revisions so that I can retrieve the source files If I need to at a later time.&lt;/p&gt;
&lt;p&gt;Today's git revision is &lt;a class="reference external" href="https://github.com/comkieffer/Thesis/tree/468dfc6790ff728a9f61a70b5914c3423ee48060"&gt;#468dfc6&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Back from another loooong break</title><link href="http://thesis.comkieffer.com/back-from-another-loooong-break.html" rel="alternate"></link><published>2016-07-04T00:00:00+02:00</published><updated>2016-07-04T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-07-04:back-from-another-loooong-break.html</id><summary type="html">&lt;p&gt;I encountered a variety of issues with the VRFT tool that forced to stop and wait, then exams got in the way of making further progress.&lt;/p&gt;
&lt;p&gt;Update for today. I continued some previous work I had started to improve the performance of the system. I am using a 2nd order system as a reference model because that makes it easy to tune the performance.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;mlx&lt;/cite&gt; file that implements this is &lt;a class="reference external" href="http://thesis.comkieffer.com/static/07-04/outer_vrft_tuning_mlx.html"&gt;here&lt;/a&gt;. This approach seems to work rather well.&lt;/p&gt;
&lt;p&gt;I also went back to check that the VRFT produces acceptable values for the outer loop and they look fine. The bode diagrams and step responses are indistinguishable. Check out the &lt;a class="reference external" href="http://thesis.comkieffer.com/static/07-04/outer_vrft_mlx.html"&gt;work&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Still looking for mistakes</title><link href="http://thesis.comkieffer.com/still-looking-for-mistakes.html" rel="alternate"></link><published>2016-05-13T00:00:00+02:00</published><updated>2016-05-13T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-05-13:still-looking-for-mistakes.html</id><summary type="html">&lt;p&gt;Today I need to find out what is wrong with the inner controller vrft.&lt;/p&gt;
&lt;p&gt;What I know:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The size of the error in the inner controller is data-dependent. With a step response it becomes incredibly big&lt;/li&gt;
&lt;li&gt;The inner reference model compares very well to the actual system behaviour in simulink. They are the same (comparing &lt;span class="math"&gt;\(q\)&lt;/span&gt; from ct system with &lt;span class="math"&gt;\(y_i\)&lt;/span&gt;). The VRFT output is quite close but clearly not as good.&lt;/li&gt;
&lt;li&gt;The ct and dt variants of &lt;tt class="docutils literal"&gt;InnerRefeenceModel&lt;/tt&gt; have the same dynamics.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- code-block::matlab

&gt;&gt; cloop = loopsens(PlantModel_dt, OptimalController);
&gt;&gt; zpk(cloop.Ti)

ans =

  From input "du" to output "uC":
  3.1107 (z^2 - 2.001z + 1.001)
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   (z+2.755) (z-1) (z-0.9986)

Sample time: 0.01 seconds
Discrete-time zero/pole/gain model. --&gt;
&lt;p&gt;Considering that &lt;tt class="docutils literal"&gt;PlantModel_dt&lt;/tt&gt; contains &lt;tt class="docutils literal"&gt;Mixer&lt;/tt&gt; the presence of the unstable pole is worrying.&lt;/p&gt;
&lt;p&gt;After another day of work I'm n closer to finding the solution to the problems. I created &lt;tt class="docutils literal"&gt;inner_vrft.mlx&lt;/tt&gt; (&lt;a class="reference external" href="http://thesis.comkieffer.com/static/05-13/inner_vrft_mlx.html"&gt;mlx link&lt;/a&gt;) to re-do the vrft from scratch and came up with the same results. I have no idea where to go from here.&lt;/p&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Back to looking for mistakes</title><link href="http://thesis.comkieffer.com/back-to-looking-for-mistakes.html" rel="alternate"></link><published>2016-05-12T00:00:00+02:00</published><updated>2016-05-12T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-05-12:back-to-looking-for-mistakes.html</id><summary type="html">&lt;p&gt;Yesterday we noticed that the vrft procedure was returning incorrect results with the new controllers. Time to find out why.&lt;/p&gt;
&lt;p&gt;First I tried to reset the controller params to what they previously were. The original and VRFT controllers sync up. Changing the controllers to the correct values makes things wrong again. The controllers look nothing alike.&lt;/p&gt;
&lt;p&gt;The complementary sensitivity for the outer loop sync up fine. The inner loop is more complicated. The phase syncs up but the magnitude doesn't. There seems to be something wrong with the inner reference model. The step response shows an error term that should not be present since the inner controller is PID.&lt;/p&gt;
&lt;!-- figure::{filename}static/05-12/inner_ref_step_response.png
:alt: step response of the inner loop --&gt;
&lt;p&gt;This is reeeeeeealy weird !&lt;/p&gt;
&lt;p&gt;Fix 1: Turns out that I copied the PID params wrong. With the correct values this behaviour disappears.&lt;/p&gt;
&lt;p&gt;Next weird issue: The controller produced by VRFT and the controller produced by the parameter vector don't sync up. Why ?&lt;/p&gt;
&lt;p&gt;I still don't have an answer. The output of the VRFT is highly dependant on the input data. If I pass in a step response then the controller is even worse than it should be. I guess that means that I am doing something wrong with the VRFT params.&lt;/p&gt;
&lt;p&gt;I'll investigate more tomorrow.&lt;/p&gt;
</summary></entry><entry><title>More Work ! Yay !</title><link href="http://thesis.comkieffer.com/more-work-yay.html" rel="alternate"></link><published>2016-05-11T00:00:00+02:00</published><updated>2016-05-11T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-05-11:more-work-yay.html</id><summary type="html">&lt;p&gt;Met with my advisor this morning. He gave me correct parameter for the PIDs. The new controllers give the system the right response time. Unfortunately this broke something else. The VRFT PIDs are waaaaaay out of whack !&lt;/p&gt;
&lt;p&gt;Objectives today:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fix the code so that the VRFT controllers look good again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Objectives for the next days:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Improve the inner reference model to increase the bandwidth (go as high as possible)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the time delay into the mix and see what it changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Consider a disturbance on the torque (dM) and see how it effects the system&lt;/p&gt;
&lt;p&gt;The procedure to determine the amplitude of the disturbance is:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pass a +10% pitch angle step to the system and measure the max torque&lt;/li&gt;
&lt;li&gt;Create a set of double steps with that amplitude lasting 1 to 10 seconds and look at the response of the system.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a first step for today I'm going to split the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;quad-copter.mlx&lt;/span&gt;&lt;/tt&gt; file into smaller files.&lt;/p&gt;
&lt;p&gt;What I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;I cleaned up &lt;tt class="docutils literal"&gt;quad_copter_model.mlx&lt;/tt&gt; to remove all the deprecated comments and stuff.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I cleaned up &lt;tt class="docutils literal"&gt;quad_copter_vrft.ml&lt;/tt&gt; to better describe what is going on and expose the VRFT parameters better.&lt;/p&gt;
&lt;p&gt;I still don't know why the controller is soooo far off. However it looks like I can replace the reference models with 1st order systems to make adjusting them really easy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I spent the rest of the afternoon fixing miscellaneous bugs in mlx_formatter and improving the output.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the mlx files:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://thesis.comkieffer.com/static/05-11/quad_copter_model_mlx.html"&gt;Quad Copter Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://thesis.comkieffer.com/static/05-11/quad_copter_vrft_mlx.html"&gt;Quad Copter VRFT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Time to finish ?</title><link href="http://thesis.comkieffer.com/time-to-finish.html" rel="alternate"></link><published>2016-05-07T00:00:00+02:00</published><updated>2016-05-07T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-05-07:time-to-finish.html</id><summary type="html">&lt;p&gt;Today I want to finish the outer loop controls.&lt;/p&gt;
&lt;p&gt;In the simulink model the output of the outer controller (q Set-Point) is too slow. The inner controller can however follow this signal easily.&lt;/p&gt;
&lt;p&gt;We observe that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The output of the outer reference model exactly follows the original control system as expected.&lt;/li&gt;
&lt;li&gt;The calculated virtual reference for the outer loop is correct.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mistake Found !!&lt;/p&gt;
&lt;p&gt;Turns out if you run VRFT on the wrong data you get the wrong result !! I was running the VRFT for the outer loop with the data from the inner loop. When I changed that everything went great.&lt;/p&gt;
&lt;p&gt;This final mlx file can be found &lt;a class="reference external" href="http://thesis.comkieffer.com/static/05-07/quad-copter_mlx.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>Making the outer controller</title><link href="http://thesis.comkieffer.com/making-the-outer-controller.html" rel="alternate"></link><published>2016-05-06T00:00:00+02:00</published><updated>2016-05-06T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-05-06:making-the-outer-controller.html</id><summary type="html">&lt;p&gt;Yesterday I was able to make the inner controller. Today I need to make the outer controller. It would also be really nice to figure out why the simulink model is broken.&lt;/p&gt;
&lt;p&gt;Turns out that if you dump the numerator and denominator of a discrete time transfer function into a continuous time transfer function block things get weird. Who would have guesed ? &amp;lt;/sarcasm&amp;gt;&lt;/p&gt;
&lt;p&gt;The next issue is that the reference models are performing poorly in simulink:&lt;/p&gt;
&lt;div class="figure" style="width: 875px; height: auto; max-width: 100%;"&gt;
&lt;img alt="Reference model output versus real outputs." src="http://thesis.comkieffer.com/static/05-06/sml_ref_vs_real.png" style="width: 875px; height: auto; max-width: 100%;"/&gt;
&lt;/div&gt;
&lt;p&gt;Why the difference ? On the MATLAB side things sync up quite nicely. What have I fucked up this time ?&lt;/p&gt;
&lt;p&gt;Turns out that this was quite easy to figure out. I was passing the error signal into the reference models instead of the virtual references.&lt;/p&gt;
&lt;p&gt;Looking at the outer controller again we can observe yesterday's problem: the outer controller is still far too slow.&lt;/p&gt;
</summary></entry><entry><title>VRFT Time</title><link href="http://thesis.comkieffer.com/vrft-time.html" rel="alternate"></link><published>2016-05-05T00:00:00+02:00</published><updated>2016-05-05T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-05-05:vrft-time.html</id><summary type="html">&lt;p&gt;Today I need to figure out why the VRFT controller is sooo fucked up ...&lt;/p&gt;
&lt;div class="section" id="expanding-a-pid"&gt;
&lt;h2&gt;Expanding a PID&lt;/h2&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    G(s) &amp;amp;= K_p + K_i \frac{1}{s} + \frac{K_ds}{1 + sT_f} \\
         &amp;amp;= \frac{K_p s + K_i}{s} + \frac{K_d s}{1 + sT_f} \\
         &amp;amp;= \frac{k_p s (1 + s T_f) + K_i (1 + s T_f) + Kd s^2}{s (1 + s T_f)} \\
         &amp;amp;= \frac{k_p  s + K_p T_f s^2 + K_i + K_i T_f s + K_d s^2}{s^2 T_f + s} \\
         &amp;amp;= \frac{(K_p T_f + K_d) s^2 + (K_p + K_i T_f) s + K_i}{s^2 T_f + s}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="expanding-a-discrete-time-pid"&gt;
&lt;h2&gt;Expanding a discrete time PID&lt;/h2&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    G(s) &amp;amp;= k_p + K_i \frac{T_s}{z - 1} + K_d \frac{1}{T_f + \frac{T_s}{z - 1}} \\
         &amp;amp;= k_p + K_i \frac{T_s}{z - 1} + K_d \frac{1}{T_f + \frac{T_s}{z - 1}} \\
         &amp;amp;= \frac{K_p (z - 1) + K_i T_s}{z - 1} + K_d \frac{z - 1}{T_f (z - 1) + T_s} \\
         &amp;amp;= \frac{\left( K_p z - K_p + K_i T_s \right) \left( T_f (z - 1) + T_s \right)
                  + K_d (z - 1)^2}{(z - 1) \left( T_f (z - 1) + T_s\right)} \\
         &amp;amp;= \frac{(K_p T_f z^2 - K_p T_f z + K_p T_s z) (-K_p T_f z + K_p T_f - K_p T_s)
                  (K_i T_s T_f z - K_i T_s T_f + K_i T_s^2)(K_d z^2 - 2 K_d z + K_d)}
                 {T_f z^2 +(T_s - 2 T_F) z + (T_f - T_s)} \\
         &amp;amp;= \frac{(K_p T_f + K_d) z^2 +
                  (-2 K_p T_f + K_p T_s + K_i T_s T_f - 2 K_d) z +
                  (K_p T_f - K_p T_s - K_i T_s T_f + K_i T_s ^2 +K_d)}
                 {T_f z^2 + (T_s - 2 T_f) z + (T_f - T_s)}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;We can isolate the different terms of the equation such that:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(s) = \frac{a_2 z^2 + a_1 z + a_0}{b_2 z^2 + b_1 z + b_0}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Comparing the two equations we have:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    a_2 &amp;amp;= K_p T_f + K_d \\
    a_1 &amp;amp;= -2 K_p T_f + K_p T_s + K_i T_s T_f - 2 K_d \\
    a_0 &amp;amp;= K_p T_f - K_p T_s - K_i T_s T_f + K_i T_s ^2 +K_d \\
    b_2 &amp;amp;= T_f \\
    b_1 &amp;amp;= T_s - 2 T_f \\
    b_0 &amp;amp;= T_f - T_s
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;In the case where &lt;span class="math"&gt;\(T_f = T_s = T\)&lt;/span&gt; the equations reduce to:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    a_2 &amp;amp;= K_p T_f + K_d \\
    a_1 &amp;amp;= - K_p T + K_i T^2 - 2 K_d \\
    a_0 &amp;amp;= K_d \\
    b_2 &amp;amp;= T \\
    b_1 &amp;amp;= - T \\
    b_0 &amp;amp;= 0
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This provides a hint as to why the controller obtained through VRFT has a correct denominator. The denominator is not affected by the PID parameters but by the fixed time constant and sampling interval.&lt;/p&gt;
&lt;p&gt;If only I knew why. Compare the &lt;tt class="docutils literal"&gt;OptimalInnerController&lt;/tt&gt;, the PID produced by the VRFT method and the original PID controller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="mf"&gt;0.562&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.076&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.5245&lt;/span&gt;
  &lt;span class="o"&gt;----------------------------&lt;/span&gt;
     &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.368&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.3679&lt;/span&gt;

&lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="n"&gt;Discrete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;transfer&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OptimalInnerController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="mf"&gt;24.02&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;44.3&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;20.94&lt;/span&gt;
  &lt;span class="o"&gt;--------------------------&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.368&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.3679&lt;/span&gt;

&lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="n"&gt;Discrete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;transfer&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For reference purposes we compare a discretised continuous time PID with an actual discrete time PID:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

   &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;2.368&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;----------------------&lt;/span&gt;
  &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.368&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.3679&lt;/span&gt;

&lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="n"&gt;Discrete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;transfer&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;---------------&lt;/span&gt;
      &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;

&lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="n"&gt;Discrete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;transfer&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is immediately obvious that even though the numerators are slightly different they are similar. The output of the VRFT is completely fucked up.&lt;/p&gt;
&lt;p&gt;Turns out that the root of the issue is that I forgot to take the Mixer into account when trying to run the VRFT. After fixing that everything went swimmingly !&lt;/p&gt;
&lt;p&gt;Next step: the outer controller. Here is where I'm struggling. It just isn't coming out right ... I wasn't able to figure it out today. Tomorrow I'll make a break hopefully.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Back from hiatus</title><link href="http://thesis.comkieffer.com/back-from-hiatus.html" rel="alternate"></link><published>2016-05-04T00:00:00+02:00</published><updated>2016-05-04T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-05-04:back-from-hiatus.html</id><summary type="html">&lt;p&gt;When I left off ages ago I had just discovered that one crucial figure had a mistake: the controllers in the figure were switched. The PD controller should in fact be in the inner loop and the PID in the outer loop. This and a couple of other changes made the data look better but I remember some graphs being very weird.&lt;/p&gt;
&lt;p&gt;We'll see how it goes today ...&lt;/p&gt;
&lt;p&gt;The thesis specifies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(R_1\)&lt;/span&gt; on the inner loop&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(R_2\)&lt;/span&gt; on the outer loop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It also gives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(R_1\)&lt;/span&gt; as a PID controller&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(R_2\)&lt;/span&gt; as a PD controller&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To figure this out we can put  each of the controllers in the inner loop and look at their settling times.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Using R1: &lt;span class="math"&gt;\(T_a \approx 5s\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Using R2: &lt;span class="math"&gt;\(T_a \approx 0.01s\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Clearly &lt;span class="math"&gt;\(R_2\)&lt;/span&gt; is significantly faster and intuitively would fit better in the inner loop. However that is not the case.&lt;/p&gt;
&lt;p&gt;Lets look at the entire system :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Using Inner R1, Outer R2: &lt;span class="math"&gt;\(T_a \approx 25s\)&lt;/span&gt;, non oscillating.&lt;/li&gt;
&lt;li&gt;Using Inner R2, Outer R1: &lt;span class="math"&gt;\(T_a \approx 180s\)&lt;/span&gt;, very under-damped.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This conclusively shows that R2 belongs in the outer loop and R1 in the inner loop.&lt;/p&gt;
&lt;p&gt;Graphs and code can be found &lt;a class="reference external" href="http://thesis.comkieffer.com/static/05-04/r1-or-r2_mlx.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now I just have to figure out why the output from matlab and simulink are different ...&lt;/p&gt;
&lt;p&gt;If I flip the controllers in simulink and put R2 back on the outer loop then the values for &lt;span class="math"&gt;\(q\)&lt;/span&gt; line up. Why ?&lt;/p&gt;
&lt;p&gt;First clue: In  the mlx script R1 and R2 were still hard-coded in a bunch of places. After replacing those things are starting to look better.&lt;/p&gt;
&lt;p&gt;In simulink the &lt;span class="math"&gt;\(\Theta\)&lt;/span&gt; and &lt;span class="math"&gt;\(q\)&lt;/span&gt; signals look good. The &lt;span class="math"&gt;\(\delta M\)&lt;/span&gt; signal however does not.&lt;/p&gt;
&lt;p&gt;In matlab the &lt;span class="math"&gt;\(\Theta\)&lt;/span&gt; signal is still good however the &lt;span class="math"&gt;\(q\)&lt;/span&gt; signal is wrong.&lt;/p&gt;
&lt;p&gt;All signals however fall short of their real counterparts. The system is still too slow compared to what is shown in the graphs in the thesis. I must have fucked up a calculation somewhere. I don't know where I fucked up but simply using &lt;tt class="docutils literal"&gt;OuterLoop.Li&lt;/tt&gt; instead of calculating the loop tf manually was enough to get rid of that mistake. Maybe I forgot the integrator or something like that.&lt;/p&gt;
&lt;p&gt;The weird thing here is that even though the &lt;span class="math"&gt;\(\Theta\)&lt;/span&gt; control loop is slow the &lt;span class="math"&gt;\(q\)&lt;/span&gt; variable looks fine but &lt;span class="math"&gt;\(\delta M\)&lt;/span&gt; does not. I'm really not sure what is going on. For today I'll pretend that everything is Ok and implement the VRFT.&lt;/p&gt;
&lt;div class="section" id="onto-vrft"&gt;
&lt;h2&gt;Onto VRFT&lt;/h2&gt;
&lt;p&gt;Things aren't going well. The complementary sensitivity for the inner loop comes out unstable, the pid params are completely off. I think I'm going to accept that my brain is fried for today and co home.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Making some progress ?</title><link href="http://thesis.comkieffer.com/making-some-progress.html" rel="alternate"></link><published>2016-04-26T00:00:00+02:00</published><updated>2016-04-26T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-26:making-some-progress.html</id><summary type="html">&lt;p&gt;Very little work this morning. My phone is breaking down and I spent most of my morning looking for replacement parts.&lt;/p&gt;
&lt;p&gt;This afternoon after the usual struggle with MATLAB hogging up to much memory I got to work. Discovered that there doesn't seem to be a documented way of running &lt;tt class="docutils literal"&gt;mlx&lt;/tt&gt; files from the command window. The usual &lt;tt class="docutils literal"&gt;run &lt;span class="pre"&gt;script-name&lt;/span&gt;&lt;/tt&gt; doesn't work.&lt;/p&gt;
&lt;p&gt;The objective today is to build a script to compare the results of the MATLAB and Simulink models so that I will know when they match up.&lt;/p&gt;
&lt;p&gt;Discoveries of the day:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The controllers in figure 7.1 (p83) are mis-labelled. The outer controller is the PID whilst the inner is the PD. This confirms my gut feeling.&lt;/li&gt;
&lt;li&gt;I still don't know shit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Something really weird is going on ... The Pitch Rate plot looks waaaaaay to much like the expected Pitch Angle model. Why ??&lt;/p&gt;
&lt;p&gt;I have no idea.&lt;/p&gt;
&lt;div class="section" id="corrections"&gt;
&lt;h2&gt;Corrections:&lt;/h2&gt;
&lt;p&gt;Looking back on this all my conclusions were wrong. The controllers were not mislabelled but their parameters in the table were. I have no idea what was going on with the plot. Blame it on a forgotten &lt;tt class="docutils literal"&gt;clear all&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Making Progress</title><link href="http://thesis.comkieffer.com/making-progress.html" rel="alternate"></link><published>2016-04-23T00:00:00+02:00</published><updated>2016-04-23T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-23:making-progress.html</id><summary type="html">&lt;p&gt;Yesterday was a lost day. I achieved practically nothing. I stared at bode plots all day without making any progress.&lt;/p&gt;
&lt;p&gt;Today was different. I decided I might as well re-study the mechanics of bode plots and the calculations behind them. Doing some theory must have helped to clear my mind because I actually was able to locate some errors in my script.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I had swapped the inner and outer controllers. This is probably what caused the significant lag to appear in the simulated output.&lt;/li&gt;
&lt;li&gt;what I was doing made no sense. I was running the set point for &lt;span class="math"&gt;\(\Theta\)&lt;/span&gt; through the inner reference model that controls the angular rate &lt;span class="math"&gt;\(q\)&lt;/span&gt; and passing it's output through an integrator instead of simulating the control loop. What I had made so little sense I'm ashamed to have ever written it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things are looking up now ! The simulated &lt;span class="math"&gt;\(\Theta\)&lt;/span&gt; looks a bit slow but the controller actually works now which is great progress. The very next steps now are to generate the angular rate set-points and simulated outputs as well as the control variable for the quad-copter, the moments.&lt;/p&gt;
&lt;p&gt;I expect to do this rather easily tomorrow. Figuring out why the controller is tad-slow will be another issue though and I have no idea how long I'll take to figure that out.&lt;/p&gt;
&lt;div class="figure" style="width: 887px; height: auto; max-width: 100%;"&gt;
&lt;img alt="Output of the pitch angle control system" src="http://thesis.comkieffer.com/static/04-23/simulated_model_behaviour.png" style="width: 887px; height: auto; max-width: 100%;"/&gt;
&lt;p class="caption"&gt;Output of the pitch angle control system&lt;/p&gt;
&lt;div class="legend"&gt;
The pitch angle control system looks a lot better now. The commutations happen in logical places however the system is still too slow. Its rise time should 3-4 seconds. Here the output never reaches the set-point. The settling time of my controller looks to be about 20s for a simple step.&lt;/div&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Is this the day I figure out what is wrong about my model ?</title><link href="http://thesis.comkieffer.com/is-this-the-day-i-figure-out-what-is-wrong-about-my-model.html" rel="alternate"></link><published>2016-04-21T00:00:00+02:00</published><updated>2016-04-21T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-21:is-this-the-day-i-figure-out-what-is-wrong-about-my-model.html</id><summary type="html">&lt;p&gt;Probably not !&lt;/p&gt;
&lt;p&gt;I needed a win today so I wrote some tangentially related code. I now have a script that will move subplots closer to one another in a figure to better use the available space.&lt;/p&gt;
&lt;p&gt;Onto figuring out the problem with the model. I know that the basic pitch-rate model is ok. I know that I have no idea what the mixer value should be or even if it looks anything like it should. I can also assume that my PIDs are Ok. I mean how can I fuck writing a PID ? I checked and double checked and it's OK. What am I missing ?&lt;/p&gt;
&lt;p&gt;Time to do some old fashioned maths ... The loop transfer function of the system is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    L(s) &amp;amp;= R_i(s) \cdot \chi \cdot G(s) \\
         &amp;amp;= \frac{30.3 s + 30}{s + 100} \cdot \chi \cdot \frac{0.4323}{s + 1} \\
         &amp;amp;= \chi \cdot \frac{13.0987 s + 12.969}{(s + 100)(s + 1.33)} \\
         &amp;amp;\approx 13 \chi \cdot \frac{s + 1}{(s + 100)(s + 1.33)}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The zero in &lt;span class="math"&gt;\(s = -1\)&lt;/span&gt; roughly cancels the pole in &lt;span class="math"&gt;\(s = -1.33\)&lt;/span&gt; so a dominant poles approximation of the system is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
L(s) = \mu \cdot \frac{1}{s + 100}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This matches perfectly with the bode plot for the inner loop:&lt;/p&gt;
&lt;div class="figure" style="width: 859px; height: auto; max-width: 100%;"&gt;
&lt;img alt="Bode plot of the inner loop of the control system" src="http://thesis.comkieffer.com/static/04-21/inner_loop_bode_plot.png" style="width: 859px; height: auto; max-width: 100%;"/&gt;
&lt;p class="caption"&gt;Bode plot of the inner loop (PD) of the control system (&lt;tt class="docutils literal"&gt;bode(InnerLoop.Li)&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Everything else is fucked up. Nothing is working.&lt;/p&gt;
&lt;p&gt;I know that:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;The &lt;tt class="docutils literal"&gt;PitchRateModel&lt;/tt&gt; is correct.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The Mixer is constant because on page 88 is does not have a dependence on &lt;span class="math"&gt;\(s\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The expressions of the &lt;span class="math"&gt;\(PD\)&lt;/span&gt; and &lt;span class="math"&gt;\(PID\)&lt;/span&gt; controllers are correct&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The bandwidths of the inner and outer loops are coherent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bandwidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InnerReferenceModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
     &lt;span class="mf"&gt;1.0390e+003&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bandwidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OuterReferenceModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
     &lt;span class="mf"&gt;1.8489e+000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have located the following graphs in the thesis that might be useful:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Figure 7.5, I assume it shows the complementary sensitivity of the outer loop&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The complementary sensitivity of my outer loop is shown here:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 863px; height: auto; max-width: 100%;"&gt;
&lt;img alt="Complementary sensitivity of my outer loop" src="http://thesis.comkieffer.com/static/04-21/outer_loop_compl_sens_bode_plot.png" style="width: 863px; height: auto; max-width: 100%;"/&gt;
&lt;p class="caption"&gt;Complementary sensitivity of my outer loop. Figure 7.5 of the thesis shows a function with a single pole around &lt;span class="math"&gt;\(s = 1\)&lt;/span&gt;. Mine has a pole and zero close to 1 that cancel each other out as well as a complex pole in 1 that leaves us with a a slope of -2 !&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Making the model work</title><link href="http://thesis.comkieffer.com/making-the-model-work.html" rel="alternate"></link><published>2016-04-19T00:00:00+02:00</published><updated>2016-04-19T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-19:making-the-model-work.html</id><summary type="html">&lt;p&gt;The aim today is to figure out if the model works and if it doesn't work to figure out why. My strategy for this is to look for graphs with the control system dynamics and compare them to what my model produces. If they don't line up I have a problem.&lt;/p&gt;
&lt;p&gt;Figure 7.13 (p96) fits the bills. It gives an input sequence I can approximate as well as the values for &lt;span class="math"&gt;\(\Theta\)&lt;/span&gt;, &lt;span class="math"&gt;\(q\)&lt;/span&gt; and &lt;span class="math"&gt;\(dM\)&lt;/span&gt;. After building the input sequence and simulating I'm in for a let down. The speed of the model looks good but the gain is waaaaaaay off.&lt;/p&gt;
&lt;div class="section" id="looking-for-the-mistake"&gt;
&lt;h2&gt;Looking for the mistake&lt;/h2&gt;
&lt;p&gt;Our &lt;tt class="docutils literal"&gt;PitchModel&lt;/tt&gt;'s transfer function is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(s) = \frac{0.4323}{s + 1.33}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The thesis provides their guess for an estimated model as:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G_n(s) = \frac{0.423}{s + 1.33}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;They are more or less the same. The difference can probably be explained away because of the imprecise estimate of &lt;span class="math"&gt;\(I_{yy}\)&lt;/span&gt; I used.&lt;/p&gt;
&lt;p&gt;I have no idea what the mixer should look like but I assume that the PID/PD controllers are good.&lt;/p&gt;
&lt;p&gt;Maybe I can reverse engineer a value for the mixer based off the gains ? Of Course I can't ! The integrator ensures 0 SSE !&lt;/p&gt;
&lt;p&gt;I have to give up for today. I'm just too tired to think straight. The product of todays work will have to stay at some code, a half baked simulink model and some shitty ideas.&lt;/p&gt;
&lt;p&gt;Better luck next time.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Modelling is like plumbing</title><link href="http://thesis.comkieffer.com/modelling-is-like-plumbing.html" rel="alternate"></link><published>2016-04-16T00:00:00+02:00</published><updated>2016-04-16T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-16:modelling-is-like-plumbing.html</id><summary type="html">&lt;p&gt;After a small hiatus I'm back to work. THe aim today is to finish connecting the models together so that I can make the reference models. If all goes well I might even be able to run the VRFT.&lt;/p&gt;
&lt;p&gt;So far I've redone all the calculations manually and I think I've figured how to plug the equations together.&lt;/p&gt;
&lt;p&gt;The complete attitude model of the quad-copter is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
I_n \dot{\omega}_b + \omega_b \times \left( I_n \omega_b \right) = M_{Damp} + M_{props}
\end{equation*}
&lt;/div&gt;
&lt;div class="math"&gt;
\begin{equation*}
M_{Damp} = \begin{bmatrix}
    \frac{\partial L}{\partial p} 0 0 \\
    0 \frac{\partial M}{\partial q} 0 \\
    0 0 \frac{\partial N}{\partial r}
\end{bmatrix} \cdot \begin{bmatrix}
    p \\ q \\ r
\end{bmatrix} \quad , \quad M_{Prop} = \begin{bmatrix}
    K_T \frac{b}{\sqrt{2}} \left( \Omega_1^2  - \Omega_2^2 - \Omega_3^2 + \Omega_4^2 \right) \\
    K_T \frac{b}{\sqrt{2}} \left( \Omega_1^2  + \Omega_2^2 - \Omega_3^2 - \Omega_4^2 \right) \\
    K_Q \left( -\Omega_1^2 + \Omega_2^2 - \Omega_3^2 + \Omega_4^2 \right)
\end{bmatrix}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Since we are only considering the pitch dynamics of the quad-copter the model reduces to:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
I_{yy}\dot{q} + \left(I_{xx} - I_{zz} \right) pr= \frac{\partial M}{\partial q} q +  K_T \frac{b}{\sqrt{2}} \left( \Omega_1^2  + \Omega_2^2 - \Omega_3^2 - \Omega_4^2 \right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;We constrain the speed of the two front and the two rear rotors to be the same&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    \Omega_1 &amp;amp;= \Omega_2 = \Omega_F \\
    \Omega_3 &amp;amp;= \Omega_4 = \Omega_R,\
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This assumption reduces the model even further:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    I_{yy}\dot{q} + \left(I_{xx} - I_{zz} \right) pr
        &amp;amp;= \frac{\partial M}{\partial q} q + K_T \frac{b}{\sqrt{2}} \left( \Omega_F^2  + \Omega_F^2 - \Omega_R^2 - \Omega_R^2 \right) \\
        &amp;amp;= \frac{\partial M}{\partial q} q +  K_T b \sqrt{2} \left( \Omega_F^2 - \Omega_R^2 \right)
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;We now linearize the model around hover conditions. The speed of the propellers in a perfect hover is &lt;span class="math"&gt;\(\Omega_H\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{alignedat}{4}
    \delta \Omega_F &amp;amp;&amp;amp;= \Omega_F - \Omega_H \quad &amp;amp;&amp;amp;\Rightarrow&amp;amp;&amp;amp; \quad \Omega_F &amp;amp;&amp;amp;= \delta \Omega_F + \Omega_H\\
    \delta \Omega_R &amp;amp;&amp;amp;= \Omega_R - \Omega_H \quad &amp;amp;&amp;amp;\Rightarrow&amp;amp;&amp;amp; \quad \Omega_R &amp;amp;&amp;amp;= \delta \Omega_R + \Omega_H\\
\end{alignedat}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The control input &lt;span class="math"&gt;\(u\)&lt;/span&gt; is the variation in the speed of the propellers:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
u = \delta \Omega = \delta \Omega_F = -\delta \Omega_R
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The model is now reduced to:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    I_{yy}\dot{q} + \left(I_{xx} - I_{zz} \right) pr
        &amp;amp;= \frac{\partial M}{\partial q} q + K_T 4 b \sqrt{2} \Omega_H \delta \Omega \\
        &amp;amp;= \frac{\partial M}{\partial q} q + \frac{\partial M}{\partial u} \delta \Omega \ , \quad \frac{\partial M}{\partial u} = K_T 4 b \sqrt{2} \Omega_H
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;It also trivial to show from here that the pitch term of the mixer matrix is simply:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\delta \Omega = \left( \frac{\partial M}{\partial u} \right)^{-1} \delta M
\end{equation*}
&lt;/div&gt;
&lt;p&gt;From here we can start plumbing.&lt;/p&gt;
&lt;p&gt;This allowed me to write the equations for the entire control system. Unfortunately the transfer functions feel off. They look faster than what I expected and don't really match up with the graphs I was able to find in the paper.&lt;/p&gt;
&lt;p&gt;The next step to verify the data would be to simulate the entire thing and see if the data that comes out looks like anything in the thesis. Once I'm confident that the models I have on paper line up with the thesis results I'll run the actual VRFT and compare the controller values.&lt;/p&gt;
&lt;p&gt;All this work is implemented in  &lt;a class="reference external" href="http://thesis.comkieffer.com/static/04-16/quad_copter_mlx.html"&gt;this&lt;/a&gt; mlx file.&lt;/p&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Making a Model</title><link href="http://thesis.comkieffer.com/making-a-model.html" rel="alternate"></link><published>2016-04-12T00:00:00+02:00</published><updated>2016-04-12T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-12:making-a-model.html</id><summary type="html">&lt;p&gt;Yesterday before I stopped I was writing the equations for the mathematical model of the quad-copter.&lt;/p&gt;
&lt;p&gt;According to the thesis, the value of &lt;span class="math"&gt;\(\frac{\partial M}{\partial u}\)&lt;/span&gt; can be chosen as either the &lt;em&gt;guessed&lt;/em&gt; value or estimated from &lt;span class="math"&gt;\(\hat{K}_T\)&lt;/span&gt; and &lt;span class="math"&gt;\(\hat{C}_T\)&lt;/span&gt;. I'm not entirely clear on how the guessed value was determined and how much it differs from the value I would obtain from &lt;span class="math"&gt;\(\hat{K}_T\)&lt;/span&gt; since I am missing some crucial data.&lt;/p&gt;
&lt;p&gt;After plotting the bode diagram of the model and comparing with figure 6.5 to check that plausibility of the result I started looking at how to generate the input signal. The work suggests a PRBS as the test input. This is obtained with :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idinput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'prbs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;band&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxu&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;N&lt;/tt&gt; is the number of samples, &lt;tt class="docutils literal"&gt;band&lt;/tt&gt; is the bandwidth of the generated sequence and &lt;tt class="docutils literal"&gt;minu&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;maxu&lt;/tt&gt; are the low and high values for the signal.&lt;/p&gt;
&lt;p&gt;I don't know any of these parameters. N I can set to a random value. The others not so much.&lt;/p&gt;
&lt;p&gt;I then moved on to  writing  the controllers. writing the pid is easy. Unfortunately I hit a road block just after. I have no idea how to connect the blocks together. The mixer matrix is supposed to sit in the middle but I'm only using a subset of the mixer matrix. When I grab just the line that I'm interested in then the output will always be 0. I need to investigate more but my brain is fried.&lt;/p&gt;
&lt;p&gt;Time to go home for today.&lt;/p&gt;
&lt;div class="section" id="questions"&gt;
&lt;h2&gt;Questions:&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How was the guess value for &lt;span class="math"&gt;\(\frac{\partial M}{\partial u}\)&lt;/span&gt; chosen ?&lt;/li&gt;
&lt;li&gt;What are the values of &lt;span class="math"&gt;\(\Omega_h\)&lt;/span&gt; or the mass of the quad-copter. Two pieces of information I need to calculate &lt;span class="math"&gt;\(\frac{\partial M}{\partial u}\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;What is the sample time for the system ? I remeber reading the the FCU runs at 100Hz. Is that it ?&lt;/li&gt;
&lt;li&gt;What &lt;tt class="docutils literal"&gt;bandwidth&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;signal_peak&lt;/tt&gt; should I use to calculate the PRBS&lt;/li&gt;
&lt;li&gt;What bit of the mixer matrix do I need for this ?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>A New Beginning</title><link href="http://thesis.comkieffer.com/a-new-beginning.html" rel="alternate"></link><published>2016-04-11T00:00:00+02:00</published><updated>2016-04-11T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-11:a-new-beginning.html</id><summary type="html">&lt;p&gt;I met with my advisor today. He changed the thesis subject slightly to account for work done in his lab since I started this project. I'm now working on a different quad-copter.&lt;/p&gt;
&lt;div class="section" id="back-to-basics"&gt;
&lt;h2&gt;Back to basics&lt;/h2&gt;
&lt;p&gt;One thing I need to investigate is how to extract the parameter vector from the output of the &lt;tt class="docutils literal"&gt;VRFT1_dy&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;The VRFT method requires that the controller be of the form:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C(z; \theta) = \beta(z)^T\theta^T
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\beta = [\beta_1(z), \beta_2(z), ..., \beta_n(z)]^T\)&lt;/span&gt; is a vector of linear transfer functions&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\theta = [\theta_1, \theta_2, ... \theta_n]^T\)&lt;/span&gt; is the vector of parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This requirement is spelled out by the main vrft paper itself:&lt;/p&gt;
&lt;blockquote&gt;
Attention is restricted to controllers which linearly depend on the parameter vector, namely the controller class &lt;span class="math"&gt;\(\left \{ C(z;\ \theta) \right \}\)&lt;/span&gt; takes the form &lt;span class="math"&gt;\(C(z;\ \theta) = \beta^T(z)\theta\)&lt;/span&gt;, where &lt;span class="math"&gt;\(\beta = [\beta_1(z), \beta_2(z), ..., \beta_n(z)]^T\)&lt;/span&gt; is a known vector of linear discrete time transfer functions and &lt;span class="math"&gt;\(\theta = [\theta_1, \theta_2, ... \theta_n]^T\)&lt;/span&gt; is the n-dimensional vector of parameters.&lt;/blockquote&gt;
&lt;p&gt;Practically this means that the transfer function of the controller should be written:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C(z; \theta) = C_1(z) \theta_1 + C_2(z) \theta_2 + ... + C_n(z) \theta
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The main vrft paper uses the following controller:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C(z; \theta) = \frac{\theta_0 + z^{-1} \theta_1 + z^{-2} \theta_2 + z^{-3} \theta_3 + z^{-4} \theta_4 + z^{-5} \theta_5}{1 - z^{-1}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This system can be re-written in two mathematically equivalent forms that however have a different meaning in a control system sense:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    C^{(1)}(z; \theta) &amp;amp;= \frac{1}{1 - z^{-1}} \cdot \sum_i \theta_i z^{-i} \\
    C^{(2)}(z; \theta) &amp;amp;= \sum_i \frac{\theta_i z^{-i}}{1 - z^{-1}}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;One has one state whereas the other has n states. As the implementer of the control system how am I supposed to deduce the intent of the system designer and, in practice, what does it change for me ? The 2 control systems should be identical or at least equivalent.&lt;/p&gt;
&lt;p&gt;This becomes an issue because it means that MATLAB does not always produce the expected output. In the above case one would expect the output to have the same structure as the basic controller however because of the way MATLAB does the calculations the result is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C(z) = \frac{a_0 + a_1 z^{-1} + ... + a_n z^{-n}}{\left( 1 - z^{-1} \right)^6}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This makes it harder to extract the values of the parameter vector. Maybe running the generated controller through &lt;tt class="docutils literal"&gt;minreal&lt;/tt&gt; can fix this.&lt;/p&gt;
&lt;div class="section" id="extracting-the-parameter-vector"&gt;
&lt;h3&gt;Extracting the parameter vector&lt;/h3&gt;
&lt;p&gt;Reading through the small bits of code that are not p-code it appears that 2 of the outputs of the &lt;tt class="docutils literal"&gt;vrft_engine&lt;/tt&gt; can be used to build the parameter vector:&lt;/p&gt;
&lt;pre class="code MATLAB literal-block"&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vrft_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,[],&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,[],&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,[],&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;Cr&lt;/tt&gt; is the controller from &lt;tt class="docutils literal"&gt;r&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Cy&lt;/tt&gt; is the controller from &lt;tt class="docutils literal"&gt;d&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;y&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;VRFT1_ry&lt;/tt&gt; returns &lt;tt class="docutils literal"&gt;Cr&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;VRFT1_dy&lt;/tt&gt; returns &lt;tt class="docutils literal"&gt;Cy&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;An&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Fn&lt;/tt&gt; however are not documented anywhere.&lt;/p&gt;
&lt;p&gt;Some code uses them as such:&lt;/p&gt;
&lt;pre class="code MATLAB literal-block"&gt;
&lt;span class="n"&gt;teta_vector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;An&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minreal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;teta_vector&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This snippet is used as part of &lt;tt class="docutils literal"&gt;VRFT1_ry_ru&lt;/tt&gt; where it used to build a controller that blends reference models on &lt;tt class="docutils literal"&gt;r&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;r&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;u&lt;/tt&gt;. Experimentally &lt;tt class="docutils literal"&gt;teta_vector&lt;/tt&gt; matches the values we calculate by hand from the &lt;tt class="docutils literal"&gt;OptimalController&lt;/tt&gt;. I created a new function &lt;tt class="docutils literal"&gt;VRFT1_dy_theta&lt;/tt&gt; that adds &lt;tt class="docutils literal"&gt;teta_vector&lt;/tt&gt; to its outputs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trying-to-convert-from-one-model-to-the-other"&gt;
&lt;h3&gt;Trying to convert from one model to the other&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;OptimalController&lt;/span&gt;

&lt;span class="n"&gt;OptimalController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;


  &lt;span class="mf"&gt;0.1463&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.947&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.787&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;5.057&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;6.521&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;6.451&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^

          &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;4.928&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;2.721&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.9536&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.165&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.00518&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;

  &lt;span class="o"&gt;-------------------------------------------------------------------------------&lt;/span&gt;

             &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;


&lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="n"&gt;Discrete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;transfer&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First strategy: use &lt;tt class="docutils literal"&gt;minreal&lt;/tt&gt; to cancel out poles and zeros. Not a Success&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;minreal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OptimalController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;


  &lt;span class="mf"&gt;0.1463&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.947&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.787&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;5.057&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;6.521&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;6.451&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^

          &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;4.928&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;2.721&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.9536&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.165&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.00518&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;

  &lt;span class="o"&gt;-------------------------------------------------------------------------------&lt;/span&gt;

             &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;


&lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="n"&gt;Discrete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;transfer&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We had more success with &lt;tt class="docutils literal"&gt;zpk&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;zpk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OptimalController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;


  &lt;span class="mf"&gt;0.14627&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;^&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.03945&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.603&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.9547&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.1676&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.9403&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="o"&gt;---------------------------------------------------------------------------------------------&lt;/span&gt;

                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;^&lt;span class="mi"&gt;6&lt;/span&gt;


&lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="n"&gt;Discrete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pole&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gain&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the extra &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(1-z^-5)&lt;/span&gt;&lt;/tt&gt; introduced by MATLAB is immediately obvious. Unfortunately I don't know how to get rid of it. This means that I still don't know how to make the controller look like the desired controller family.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="taking-a-look-at-the-new-quad-copter-model"&gt;
&lt;h2&gt;Taking a look at the new quad-copter model&lt;/h2&gt;
&lt;p&gt;Good news. I can mode forward. The controller structure is the same: PD on the outer loop, PID on the inner loop. This is a standard for quadcopters but seems like a weird choice, wouldn't a PD be faster than a PID ?&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    C_i(z) &amp;amp;= K_{Pi} + K_{Ii} \frac{1}{s} + K_{Di} \frac{s}{1 + sT_f} \\
    C_o(z) &amp;amp;= k_{Po} + K_{Do} \frac{s}{1 + sT_f}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(T_f\)&lt;/span&gt; term would be hard to fit into the VRFT framework since it introduces a non-linear dependence on the parameter vector. In the cascade vrft paper it is fixed using results from a model based approach. This means I need to ask my prof for a value if I can't find it in the paper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="work-done-today"&gt;
&lt;h2&gt;Work done today&lt;/h2&gt;
&lt;p&gt;I met my professor this morning for new guidance and intructions. I spent some time investigating one of the things we discussed (see the first section of this post). I then switched gears to get started on the quad-copter model. I've started a new &lt;tt class="docutils literal"&gt;mlx&lt;/tt&gt; file to do the work. Most of my time so far has been spent going through the paper looking for values needed to build the models.&lt;/p&gt;
&lt;p&gt;I'm most of the way there. I spent some time looking dM/du but finally found it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="open-questions"&gt;
&lt;h2&gt;Open Questions&lt;/h2&gt;
&lt;p&gt;The thesis estimates &lt;span class="math"&gt;\(\hat{K}_T\)&lt;/span&gt; and derives &lt;span class="math"&gt;\(\hat{C}_T\)&lt;/span&gt; from that. I calculate &lt;span class="math"&gt;\(K_T\)&lt;/span&gt; from that. Having the direct measurement of &lt;span class="math"&gt;\(K_T\)&lt;/span&gt; would be nicer.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Writing about Cascade Control and Noise</title><link href="http://thesis.comkieffer.com/writing-about-cascade-control-and-noise.html" rel="alternate"></link><published>2016-04-07T00:00:00+02:00</published><updated>2016-04-07T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-07:writing-about-cascade-control-and-noise.html</id><summary type="html">&lt;p&gt;Today I started with some cleanup and added the 'Better Figures and Images' plugin to the repo.&lt;/p&gt;
&lt;p&gt;I spent the rest of my morning doing a write-up about cascade VRFT. I have a firm (I think) grasp on the method. I then started looking at the problem of noisy data.&lt;/p&gt;
&lt;div class="section" id="vrft-and-noise"&gt;
&lt;h2&gt;VRFT And Noise&lt;/h2&gt;
&lt;p&gt;Assume that the plant output (&lt;span class="math"&gt;\(y\)&lt;/span&gt;) is affected by an additive noise &lt;span class="math"&gt;\(\zeta(t)\)&lt;/span&gt; .&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\tilde{y}(t) = P \ u(t) + \zeta(t)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;In an open loop experiment it is reasonable to assume that &lt;span class="math"&gt;\(y\)&lt;/span&gt; and &lt;span class="math"&gt;\(\zeta\)&lt;/span&gt; are uncorrelated. In a closed loop experiment this would not be the case since &lt;span class="math"&gt;\(\zeta\)&lt;/span&gt; would propagate through the retro-action into the error term &lt;span class="math"&gt;\(e\)&lt;/span&gt; and from there to the plant output.&lt;/p&gt;
&lt;p&gt;This noise will introduce a bias into &lt;span class="math"&gt;\(J_{VR}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Recall the asymptotic with noise free data:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
J_{VR}(\theta) = \frac{1}{2\pi} \int_{-\pi}^{\pi} \left| P \cdot \left( C_0 - C(\theta) \right) \left( 1 - M_R \right) \cdot \frac{L}{M_R} \right|^2 \Phi_u \ d\omega
\end{equation*}
&lt;/div&gt;
&lt;p&gt;With the noise however it becomes:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
J_{VR}(\theta) = \frac{1}{2\pi} \int_{-\pi}^{\pi} \left[ \left| P \cdot \left( C_0 - C(\theta) \right) \left( 1 - M_R \right) \cdot \frac{L}{M_R} \right|^2 \Phi_u + \left| \frac{C(\theta)}{PC_0} L \right|^2 \Phi_d \right] d\omega
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Where &lt;span class="math"&gt;\(Phi_d\)&lt;/span&gt; is the spectral density of the noise. Since the second term depends on &lt;span class="math"&gt;\(\theta\)&lt;/span&gt; the minima of the two functions are different. If this were not the case the extra term would just represent a constant vertical offset and could safely be neglected.&lt;/p&gt;
&lt;p&gt;One way of counteracting this effect is to use 2 different output measurements with the same input signal. We simply run the same experiment twice and record the output of the system. We then calculate:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    \tilde{\varphi}_L^{(1)} &amp;amp;= \beta(z)\tilde{e}_L^{(1)} = \beta(z) \frac{1 - M_R}{M_R} L(z)\  \tilde{y}^{(1)}(t) \\
    \tilde{\varphi}_L^{(2)} &amp;amp;= \beta(z)\tilde{e}_L^{(2)} = \beta(z) \frac{1 - M_R}{M_R} L(z)\  \tilde{y}^{(2)}(t) \\
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;And we then compute the optimal parameter vector as:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\theta_N^{P1} = \left[ \sum_{t=1}^N \tilde{\varphi}_L^{(1)}(t)\ \tilde{\varphi}_L^{(2)T}(t) \right]^{-1} \sum_{t=1}^N \tilde{\varphi}_l^{(1)}(t)\ u_L(t)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;If the two experiments are uncorrelated then asymptotically &lt;span class="math"&gt;\(\theta_N^{P1}\)&lt;/span&gt; will converge to the value observed in the noiseless case.&lt;/p&gt;
&lt;p&gt;If we are unable to obtain a second set of measurement data we can identify a high-order model of the plant and use it to generate a new set of outputs. However, due to the limited accuracy of such a model this does not guarantee that &lt;span class="math"&gt;\(\theta_N^{P1}\)&lt;/span&gt; will converge to the noiseless value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="open-questions-so-far"&gt;
&lt;h2&gt;Open Questions so Far&lt;/h2&gt;
&lt;p&gt;We use 2 sets of data for noise reduction. Why not use more and simply average them. Why don't we calculate a &lt;span class="math"&gt;\(\bar{varphi}\)&lt;/span&gt;, the average of the &lt;span class="math"&gt;\(\tilde{\varphi}_L^{(n)}\)&lt;/span&gt;, and use that instead ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stuff-to-work-on-next"&gt;
&lt;h2&gt;Stuff to work on next&lt;/h2&gt;
&lt;p&gt;I don't know. I'm kind of stuck at the moment with nothing to do until I get more information.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>I'm a VRFT Expert !!</title><link href="http://thesis.comkieffer.com/im-a-vrft-expert.html" rel="alternate"></link><published>2016-04-04T00:00:00+02:00</published><updated>2016-04-04T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-04-04:im-a-vrft-expert.html</id><summary type="html">&lt;p&gt;Today I figured out how to export my tikz figures as images, finished the tf2latex script. I'm honestly not sure what I'll use it for but it's pretty cool. The real meat of today's work was finishing the write-up on VRFT. I now have a complete explanation of the method &lt;a class="reference external" href="http://thesis.comkieffer.com/pages/the-vrft-technique.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>More Theory</title><link href="http://thesis.comkieffer.com/more-theory.html" rel="alternate"></link><published>2016-03-30T00:00:00+02:00</published><updated>2016-03-30T00:00:00+02:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-03-30:more-theory.html</id><summary type="html">&lt;p&gt;I got off to a late start today due to some conferences I wanted to attend in Leonardo. I've spent most of time so far copy-editing the main VRFT explanation page (&lt;tt class="docutils literal"&gt;VRFT.rst&lt;/tt&gt;) and making tikz illustrations for the control scheme.&lt;/p&gt;
&lt;p&gt;I think I understand the cascade control algoithm !&lt;/p&gt;
&lt;div class="section" id="the-cascade-control-algorithm"&gt;
&lt;h2&gt;The cascade control algorithm:&lt;/h2&gt;
&lt;div class="figure align-center" style="width: 2706px; height: auto; max-width: 100%;"&gt;
&lt;img alt="A block diagram of the cascade VRFT control scheme" src="http://thesis.comkieffer.com/static/03-30/cascade_vrft_block_diagram.jpg" style="width: 2706px; height: auto; max-width: 100%;"/&gt;
&lt;p class="caption"&gt;Block Diagram of a generic cascade control system showing the inner and outer reference models.&lt;/p&gt;
&lt;div class="legend"&gt;
Note that the outputs of the plant and the reference models are identical.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the cascade algorithm we assume that we have output measurements of the inner and outer plants &lt;span class="math"&gt;\(y_i(t)\)&lt;/span&gt; and &lt;span class="math"&gt;\(y_o(t)\)&lt;/span&gt; for a given input signal &lt;span class="math"&gt;\(u(t)\)&lt;/span&gt;. We start by applying VRFT to the inner loop with the usual method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;InnerController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VRFT1_dy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InnerRefModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InnerControllerFamily&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The difficulty is performing VRFT on the outer loop. To do this we would need to know the output of the first controller. Fortunately, now that we have the inner controller we can calculate it.&lt;/p&gt;
&lt;p&gt;We know that:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    e_i(t) &amp;amp;= r_i(t) - y_i(t) \\
           &amp;amp;= C_i^{-1} u(t)
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;We can only invert &lt;span class="math"&gt;\(C_i\)&lt;/span&gt; if it is minium phase. If it isn't minimum phase we need to choose a different reference model or the sampling time.&lt;/p&gt;
&lt;p&gt;Now that &lt;span class="math"&gt;\(e_i(t)\)&lt;/span&gt; is known we can retirieve &lt;span class="math"&gt;\(r_i(t)\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    r_i(t) &amp;amp;= e_i(t) + y_i(t) = C_i^{-1}u(t) + y_i(t) \\
           &amp;amp;= u_o(t)
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;From here the solution is quite trivial:&lt;/p&gt;
&lt;pre class="code matlab literal-block"&gt;
&lt;span class="n"&gt;OuterController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VRFT1_dy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u_o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OuterRefModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OuterControllerFamily&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Finding out if our controller sucks</title><link href="http://thesis.comkieffer.com/finding-out-if-our-controller-sucks.html" rel="alternate"></link><published>2016-03-24T00:00:00+01:00</published><updated>2016-03-24T00:00:00+01:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-03-24:finding-out-if-our-controller-sucks.html</id><summary type="html">&lt;p&gt;This morning I spent some time fixing up various MATLAB scripts. My startup script produces cleaner output making it easier to identify packages that have been loaded.&lt;/p&gt;
&lt;div class="section" id="discovering-some-weird-things"&gt;
&lt;h2&gt;Discovering some weird things&lt;/h2&gt;
&lt;div class="section" id="problem-1-loop-transfer-function"&gt;
&lt;h3&gt;Problem 1 : Loop transfer function&lt;/h3&gt;
&lt;p&gt;My gentle predecessors seem to have made a mistake. They have a reference model (&lt;tt class="docutils literal"&gt;ref_model&lt;/tt&gt;) loaded from a data file. They then calculat the loop transfer function of this model.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;discreto&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ref_model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'tustin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;L_rif&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;discreto&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;discreto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How does this make sense. The reference model is an &lt;strong&gt;open loop&lt;/strong&gt;, &lt;strong&gt;feed forward&lt;/strong&gt; type model from the reference input to the output. It should be compared directly with the &lt;strong&gt;closed loop&lt;/strong&gt; plant model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-2-sample-time"&gt;
&lt;h3&gt;Problem 2: Sample Time&lt;/h3&gt;
&lt;p&gt;They have a sample time of 0.02s. Is that correct ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="comparing-the-2-models"&gt;
&lt;h2&gt;Comparing the 2 models:&lt;/h2&gt;
&lt;div class="figure align-center" style="width: 887px; height: auto; max-width: 100%;"&gt;
&lt;img alt="Comparison of step responses" src="http://thesis.comkieffer.com/static/03-24/mine_vs_theirs_step.png" style="width: 887px; height: auto; max-width: 100%;"/&gt;
&lt;p class="caption"&gt;Comparison of the step responses of the 2 reference models&lt;/p&gt;
&lt;/div&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="43%"&gt;&lt;/col&gt;
&lt;col width="29%"&gt;&lt;/col&gt;
&lt;col width="29%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Models&lt;/th&gt;
&lt;th class="head"&gt;Mine&lt;/th&gt;
&lt;th class="head"&gt;Theirs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Rise TIme&lt;/td&gt;
&lt;td&gt;0.1172 s&lt;/td&gt;
&lt;td&gt;0.4453 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Overshoot&lt;/td&gt;
&lt;td&gt;25.37 %&lt;/td&gt;
&lt;td&gt;9.48 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Peak&lt;/td&gt;
&lt;td&gt;1.2537&lt;/td&gt;
&lt;td&gt;1.0948&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Peak Time&lt;/td&gt;
&lt;td&gt;0.2763&lt;/td&gt;
&lt;td&gt;0.9394&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Settling Time&lt;/td&gt;
&lt;td&gt;0.6728 s&lt;/td&gt;
&lt;td&gt;1.4264 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Our model is faster but has higher overshoot. In hindsight I should probably bring the overshoot down some more but it's fine for the moment.&lt;/p&gt;
&lt;p&gt;The bode plots are also OK.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 887px; height: auto; max-width: 100%;"&gt;
&lt;img alt="Comparison of the bode plots of my controller and their controller" src="http://thesis.comkieffer.com/static/03-24/mine_vs_theirs_step.png" style="width: 887px; height: auto; max-width: 100%;"/&gt;
&lt;p class="caption"&gt;Comparison of the Bode plots of the 2 reference models&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can view the mlx file for the comparison &lt;a class="reference external" href="http://thesis.comkieffer.com/static/03-24/mine_vs_theirs_mlx.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-else-did-i-do"&gt;
&lt;h2&gt;What else did I do ?&lt;/h2&gt;
&lt;p&gt;I worked with one of the papers ("Virtual Reference Feedback Tuning (VRFT): a new direct approach to the design of feedback controllers") and implemented their controller to check that what I was doing worked.&lt;/p&gt;
&lt;p&gt;I have one issue that is shown in the last part of the paper. For  high values of &lt;span class="math"&gt;\(t\)&lt;/span&gt; the closed loop system diverges. I can't see anything in the system that might explain this behaviour so I don't know what's going on.&lt;/p&gt;
&lt;p&gt;This work is implemented in &lt;a class="reference external" href="http://thesis.comkieffer.com/static/03-24/vrft_paper_example_mlx.html"&gt;this&lt;/a&gt; mlx file.&lt;/p&gt;
&lt;p&gt;I also spent some time brushing up on my understanding of the VRFT method and started writing the static page describing the VRFT method. The rest of my time was spent writing a (still unfinished) script to convert MATLAB &lt;tt class="docutils literal"&gt;tf&lt;/tt&gt; objects to latex code and fixing up my startup file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Try the vrft script I've made on the other example from the paper. I recall the coeficients being off.&lt;/li&gt;
&lt;li&gt;I need to have a better grasp of the maths behind the VRFT method. I remember detailing them in the black notebook&lt;/li&gt;
&lt;li&gt;I need to work on cascade VRFT some more to understand it. How do I make the reference signal ?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="moving-on-the-cascade-algorithm"&gt;
&lt;h2&gt;Moving on, the cascade algorithm&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Develop 2 reference models, &lt;span class="math"&gt;\(M_i(q)\)&lt;/span&gt; for the inner loop and &lt;span class="math"&gt;\(M_o(q)\)&lt;/span&gt; for the outer loop&lt;/li&gt;
&lt;li&gt;Develop two families of proper controllers &lt;span class="math"&gt;\({C_i(q; \theta_i)}\)&lt;/span&gt; and &lt;span class="math"&gt;\({C_o(q; \theta_o)}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The available data is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(u(t)\)&lt;/span&gt; the control variable&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(y_i(t)\)&lt;/span&gt; the output of the inner loop&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(y_o(t)\)&lt;/span&gt; the output of the outer loop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The inner controller can be easily tuned with standard vrft. The outer controller is more problematic. The inner controller can be tuned because its output is the control variable &lt;span class="math"&gt;\(u(t)\)&lt;/span&gt;, the output of the outer controller is &lt;span class="math"&gt;\(r_i(t)\)&lt;/span&gt; which unfortunately is not available to us. However, we can compute a reference signal &lt;span class="math"&gt;\(r_{iV}(t)\)&lt;/span&gt; such that &lt;span class="math"&gt;\(y_i(t) = M_i(q)r_{iV}(t)\)&lt;/span&gt;. If the inner controller is correctly parametrized (&lt;span class="math"&gt;\(C_i(q; \theta_i)\)&lt;/span&gt; cancels &lt;span class="math"&gt;\(J_{MR}(\theta\)&lt;/span&gt;) then &lt;span class="math"&gt;\(r_i(t) = r_{iV}(t)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In this case we can apply a new VRFT to the outer controller. I'm not sure what to do if this isn't the case.&lt;/p&gt;
&lt;div class="section" id="open-questions-so-far"&gt;
&lt;h3&gt;Open questions so far&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;How can I evaluate whether the controller is in the right class. Can I always assume that this is what the VRFT tool gives me?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Making that discretized reference model</title><link href="http://thesis.comkieffer.com/making-that-discretized-reference-model.html" rel="alternate"></link><published>2016-03-21T00:00:00+01:00</published><updated>2016-03-21T00:00:00+01:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-03-21:making-that-discretized-reference-model.html</id><summary type="html">&lt;p&gt;Yesterday when we left off we had just built our reference model from the requirements. Now we need to discretize it and build the controller.&lt;/p&gt;
&lt;p&gt;Unfortunately things would not be as simple. I spent most of my day fighting a weird MATLAB bug that was preventing my &lt;tt class="docutils literal"&gt;startup.m&lt;/tt&gt; file form executing. Eventually I updated MATLAB to get rid of the issue without ever understanding it.&lt;/p&gt;
&lt;p&gt;Back to work. I set up a new &lt;tt class="docutils literal"&gt;.mlx&lt;/tt&gt; live script and got to work. First we make the reference model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;% Build the model. The parameter choice is explained in the previous post.&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;den&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ord2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;RefModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;den&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;% discretize the model&lt;/span&gt;
&lt;span class="n"&gt;Ts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;RefModel_dt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RefModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'tustin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;RefModel_dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can build the plant model from our data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;io_data&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data/dati_qr'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;model_data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data/modello'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;PlantModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;PlantModel_dt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PlantModel&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'tustin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;PlantModel_dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the controller family:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ControllerFamily&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;ControllerFamily_dt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ControllerFamily&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'tustin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ControllerFamily_dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point we can apply the VRFT algorithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;OptimalController_dt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VRFT1_ry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;u1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;io_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RefModel_dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ControllerFamily_dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Click  &lt;a class="reference external" href="http://thesis.comkieffer.com/static/03-21/matlab_work_mlx.html"&gt;here&lt;/a&gt; to view the &lt;tt class="docutils literal"&gt;.mlx&lt;/tt&gt; file for the day.&lt;/p&gt;
&lt;p&gt;Tomorrow I'll compare my controller with the controller from the previous guys and see what they have. Hopefullly it should be pretty similar.&lt;/p&gt;
</summary></entry><entry><title>Today</title><link href="http://thesis.comkieffer.com/today.html" rel="alternate"></link><published>2016-03-19T00:00:00+01:00</published><updated>2016-03-19T00:00:00+01:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-03-19:today.html</id><summary type="html">&lt;div class="section" id="chosing-a-reference-model"&gt;
&lt;h2&gt;Chosing a reference model&lt;/h2&gt;
&lt;p&gt;The requirements are &lt;span class="math"&gt;\(T_s &amp;lt; 1s\)&lt;/span&gt; and &lt;span class="math"&gt;\(S_\% &amp;lt; 25\%\)&lt;/span&gt;. The overshoot requirement imposes &lt;span class="math"&gt;\(\zeta &amp;lt; 0.4\)&lt;/span&gt; whilst the settling time can be approximated with (cf: previous post):&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
T_s \approx \frac{5}{\zeta\omega_n} = \frac{12.5}{\omega_n}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Thus the required bandwidth is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\omega_n = \frac{12.5}{T_s} = 12.5 \quad rad/s
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The corresponding second order model is obtained with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;den&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ord2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;RefModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;den&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="math"&gt;
\begin{equation*}
M_R = \frac{1}{s^2 + 10s + 156.2}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Model Performance.&lt;/p&gt;
&lt;p&gt;Unfortunately this is it for today. MATLAB has crashed and I'm done !&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Discrete systems theory</title><link href="http://thesis.comkieffer.com/discrete-systems-theory.html" rel="alternate"></link><published>2016-03-17T00:00:00+01:00</published><updated>2016-03-17T00:00:00+01:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-03-17:discrete-systems-theory.html</id><summary type="html">&lt;div class="section" id="definitions"&gt;
&lt;h2&gt;Definitions&lt;/h2&gt;
&lt;p&gt;Consider the general form of a discrete time system:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    x\left( k+1 \right) &amp;amp;= f\left( x\left( k \right), u\left( k \right), k \right) \\
                   y(k) &amp;amp;= g\left( x\left( k \right), u\left( k \right), k \right)
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;div class="section" id="strictly-proper-systems"&gt;
&lt;h3&gt;Strictly proper systems&lt;/h3&gt;
&lt;p&gt;If the output equation of the system can be written as &lt;span class="math"&gt;\(y(k) = g\left( x\left( k \right), k \right)\)&lt;/span&gt; then the output variable des not depend directly on the input and the system is &lt;em&gt;strictly proper&lt;/em&gt;. The input must propagate through the state before affecting the output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="time-invariant-systems-stationary"&gt;
&lt;h3&gt;Time Invariant systems (Stationary)&lt;/h3&gt;
&lt;p&gt;If the functions &lt;span class="math"&gt;\(f\)&lt;/span&gt; and &lt;span class="math"&gt;\(g\)&lt;/span&gt; do not explicitely depend on the time variable $k$ then the system is time invariant and can be rewritten as:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    x\left( k+1 \right) &amp;amp;= f\left( x\left( k \right), u\left( k \right) \right) \\
                   y(k) &amp;amp;= g\left( x\left( k \right), u\left( k \right) \right)
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reachability-controllability"&gt;
&lt;h3&gt;Reachability (Controllability)&lt;/h3&gt;
&lt;p&gt;A generic state &lt;span class="math"&gt;\(\widetilde{x}\)&lt;/span&gt; is reachable if there exist an instant of time &lt;span class="math"&gt;\(\widetilde{k}\)&lt;/span&gt; to &lt;span class="math"&gt;\(\widetilde{k} - 1\)&lt;/span&gt; such that the forced state of the system &lt;span class="math"&gt;\(\widetilde{x}_f(k)\)&lt;/span&gt; with &lt;span class="math"&gt;\(0 \leq k  \leq \widetilde{k}\)&lt;/span&gt; generated by &lt;span class="math"&gt;\(\widetilde{u}\)&lt;/span&gt; produces &lt;span class="math"&gt;\(\widetilde{x}_f(k) = \widetilde{x}\)&lt;/span&gt;    .&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Reachability Matrix&lt;/strong&gt; is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\underline{M}_R = \begin{bmatrix}B \quad AB \quad A^2B \quad ... \quad A^{n-1}B\end{bmatrix}
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="observability"&gt;
&lt;h3&gt;Observability&lt;/h3&gt;
&lt;p&gt;A state &lt;span class="math"&gt;\(\widetilde{x} \neq 0\)&lt;/span&gt; is said to be &lt;em&gt;non observable&lt;/em&gt; if, for any &lt;span class="math"&gt;\(\widetilde{k} &amp;gt; 0\)&lt;/span&gt; the free motion of the system &lt;span class="math"&gt;\(\widetilde{y}_l(k) = 0\)&lt;/span&gt; with &lt;span class="math"&gt;\(0 \leq k \leq \widetilde{k}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Observability Matrix&lt;/strong&gt; is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\underline{M}_O = \begin{bmatrix}
    C \\
    CA \\
    CA^2 \\
    \vdots \\
    CA^{n-1}
\end{bmatrix}
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="transfer-function"&gt;
&lt;h3&gt;Transfer function&lt;/h3&gt;
&lt;p&gt;The general form of the transfer function for a discrete time system is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(z) = C(zI - A)^{-1}B + D
\end{equation*}
&lt;/div&gt;
&lt;p&gt;By construction &lt;span class="math"&gt;\(C(zI - A)^{-1}B\)&lt;/span&gt; is a rational function in $z$ where the denominator is of degree $n$ and the numerator's  degree is at most &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;. This is the form of a strictly proper system (&lt;span class="math"&gt;\(D = 0\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;If the system is not proper &lt;span class="math"&gt;\(G(z)\)&lt;/span&gt; is still a rational function in z but both the numerator and the denominator have degree &lt;span class="math"&gt;\(n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If the numerator and the denominator have common roots they must cancel each other out to produce a rational function whose degree is &lt;span class="math"&gt;\(\nu \lt n\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The transfer function can be written as:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(z) = \frac{N_G(z)}{D_G(z)} = \frac{\beta_{\nu}z^{\nu} + \beta_{\nu-1}z^{\nu-1} + ... + \beta_1z + \beta_0}{\alpha_{\nu}z^{\nu} + \alpha_{\nu-1}z^{\nu-1} + ... + \alpha_1z + \alpha_0}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Without losing in generality we can assume &lt;span class="math"&gt;\(\alpha_{\nu} = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="time-delay"&gt;
&lt;h3&gt;Time Delay&lt;/h3&gt;
&lt;p&gt;A time discrete time delay is described by the following input-output form:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
y(k) = u(k-h) \Leftrightarrow Y(z) = z^{-h}U(z)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Thus the tranfer function associated with the delay component is &lt;span class="math"&gt;\(G(z) = z^{-h}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Considering a system where the action of the input is delayed by &lt;span class="math"&gt;\(h\)&lt;/span&gt; ticks such as:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    v(k) &amp;amp;= u(k-h)\\
    x(k+1) &amp;amp;= Ax(k) + Bu(k) \\
    y(k) &amp;amp;= Cx(k) + Du(k)
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;It can be show that the transfer function is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(z) = z^{-h}G'(z) \qquad, \qquad G'(z) = C(zI - A)^{-1}B + D
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="frequency-response"&gt;
&lt;h3&gt;Frequency Response&lt;/h3&gt;
&lt;p&gt;The frequency response of the transfer function is calculated as:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(e^{j\theta}) = C(e^{j\theta}I - A)^{-1}B + D \qquad, \qquad \theta \in \left[0, \pi \right]
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This is simply a restriction of the transfer function to the semi-circumference defined by the complex points with positive or null immaginary part and unit modulus excluding those points that are also poles of &lt;span class="math"&gt;\(G(z)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="settling-time"&gt;
&lt;h3&gt;Settling Time&lt;/h3&gt;
&lt;p&gt;Consider a first order system:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(z) = \frac{\mu(1-p)}{z-p} \qquad, \qquad p \neq 0
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The step response of this system is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
y(k) = \mu(1-p^k) \qquad, \qquad k \geq 0
\end{equation*}
&lt;/div&gt;
&lt;p&gt;And the steady state value is &lt;span class="math"&gt;\(y_{\infty} = \mu\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The settling time of the system is the time it takes to output variable to enter the range &lt;span class="math"&gt;\(\left[y_{\infty}(1 - 0.01\epsilon), \quad y_{\infty}(1 - 0.01\epsilon) \right]\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{alignedat}{3}
    &amp;amp;            y_{\infty}(1 - 0.01\varepsilon) &amp;amp;&amp;amp; \leq (1-p^k)  &amp;amp;&amp;amp;&amp;lt; y_{\infty}(1+ 0.01\varepsilon) \\
    &amp;amp;\frac{y_{\infty}}{\mu}(1 - 0.01\varepsilon) &amp;amp;&amp;amp; \leq  1-p^k   &amp;amp;&amp;amp;&amp;lt; \frac{y_{\infty}}{\mu}(1+ 0.01\varepsilon) \\
    &amp;amp;                          (1 - 0.01\varepsilon) &amp;amp;&amp;amp; \leq  1-p^k   &amp;amp;&amp;amp;&amp;lt; (1+ 0.01\varepsilon) \\
    &amp;amp;                               -0.01\varepsilon &amp;amp;&amp;amp; \leq    p^k   &amp;amp;&amp;amp;&amp;lt; 0.01\varepsilon \\
\end{alignedat}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Which can be traslated into the following requirement:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
k \cdot ln(p) &amp;lt; ln(0.01\varepsilon) \qquad \Rightarrow  \qquad k &amp;lt; \frac{ln(0.01\varepsilon)}{p}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Thus, the settling time is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
T_{a\epsilon} = \lceil \frac{ln(0.01\varepsilon)}{ln(p)} \rceil
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Consider now a second order system with complex conjugate poles:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(s) = \frac{\mu \omega^2_n}{s^2 + 2\zeta\omega_ns + \omega^2_n}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This system has ann oscillatory behaviour and the peaks of the oscillations lie on 2 decaying exponentials:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
y_{max}(t) = 1 + e^{-\zeta\omega_nt}
y_{min}(t) = 1 - e^{-\zeta\omega_nt}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(\bar{t}\)&lt;/span&gt; be the instant in which the function &lt;span class="math"&gt;\(y_{max}\)&lt;/span&gt; and &lt;span class="math"&gt;\(y_{min}\)&lt;/span&gt; enter the range &lt;span class="math"&gt;\(\left[ y_{\infty}(1 - 0.01\epsilon), \quad y_{\infty}(1 - 0.01\epsilon) \right]\)&lt;/span&gt;. To determine &lt;span class="math"&gt;\(\bar{t}\)&lt;/span&gt; we simply impose:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    1 + 0.01\varepsilon &amp;amp;= 1 + e^{-\zeta\omega_n\bar{t}} \\
        0.01\varepsilon &amp;amp;= e^{-\zeta\omega_n\bar{t}} \\
                \bar{t} &amp;amp;= -\frac{1}{\zeta\omega_n} ln(0.01\varepsilon) \approx \frac{4.6}{\zeta\omega_n}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;If today showed me anything is that I don't know shit about designing discrete time control systems. The best thing to do is to stick with what I know: use the requirements to produce a continuous time reference model that I can discretize with &lt;cite&gt;c2d&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;I'll just have to check its performance to make sure that everything is OK but that should be enough.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Trying to make shit work</title><link href="http://thesis.comkieffer.com/trying-to-make-shit-work.html" rel="alternate"></link><published>2016-03-16T00:00:00+01:00</published><updated>2016-03-16T00:00:00+01:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-03-16:trying-to-make-shit-work.html</id><summary type="html">&lt;p&gt;Consider a simple case:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C(z; \theta) = \frac{\theta_0 + \theta_1 z^{-1}}{1 - z^{-1}}
             = \frac{\theta_0}{1 - z^{-1}} + \frac{\theta_1 z^{-1}}{1 - z^{-1}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;I would expect to write this as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then to calculate the optimal controller (&lt;span class="math"&gt;\(C(z) = \beta^T(z) \cdot {\theta_n}^T\)&lt;/span&gt;), assuming &lt;span class="math"&gt;\(\underline{\theta} = \left| 1,1 \right|\)&lt;/span&gt; I would write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;theta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;OptimalController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The expected result is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\dfrac{1}{1 - z^{-1}} + \dfrac{z^{-1}}{1 - z^{-1}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Instead I get:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\dfrac{1 - z^{-2}}{1 - 2 \cdot z^{-1} + z^{-2}} = \dfrac{-1 + z^{-2}}{\left( 1 - z^{-1} \right)^2}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This happens because MATLAB is dumb. This is the process it follows:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{aligned}
    C(z; \theta) &amp;amp;= \begin{bmatrix}
        \dfrac{-1}{1 - z^{-1}} \quad \dfrac{-z^{-1}}{1 - z^{-1}}
    \end{bmatrix} \
    \cdot \
    \begin{bmatrix} \
        1 \\
        1
    \end{bmatrix} \\
    &amp;amp;= \dfrac{-z^{-1}}{1 - z^{-1}} + \dfrac{-1}{1 - z^{-1}} \\
    &amp;amp;= \dfrac{-z^{-1} \left(1 - z^{-1} \right) - 1 \left(1 - z^{-1} \right)}{\left( 1 - z^{-1} \right)^2} \\
    &amp;amp;= \dfrac{-1 + z^{-2}}{\left( 1 - z^{-1} \right)^2}
\end{aligned}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Now things start to make sense:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
(1 - z^{-1})^6 = 1 - 6 \cdot z^{-1} + 15 \cdot z^{-2} - 20 \cdot z^{-3} + 15 \cdot z^{-4} -6 \cdot z^{-5} + \cdot z^{-6}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Which is the &lt;span class="math"&gt;\(z^{-4} \cdot Denominator\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="weird-stuff"&gt;
&lt;h2&gt;Weird stuff:&lt;/h2&gt;
&lt;p&gt;Why does&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Become &lt;span class="math"&gt;\(\dfrac{-1}{1 - z^{-1}}\)&lt;/span&gt; instead of &lt;span class="math"&gt;\(\dfrac{1}{1 - z^{-1}}\)&lt;/span&gt; ?&lt;/p&gt;
&lt;p&gt;This happens because &lt;tt class="docutils literal"&gt;Controller'&lt;/tt&gt; return the &lt;strong&gt;conjugate transpose&lt;/strong&gt; instead of the &lt;strong&gt;transpose&lt;/strong&gt;. The transpose operation is actually &lt;tt class="docutils literal"&gt;.'&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="questions-to-ask"&gt;
&lt;h2&gt;Questions to ask&lt;/h2&gt;
&lt;p&gt;MATLAB doesn't do the smart sum of the parts of the controller which makes it harder to extract the parameter vector. We can only retrieve the raw controller. Using the example in the paper we can calculate a controller of the form &lt;span class="math"&gt;\(\frac{p(z)}{\left(1 - z^{-1}\right)^6}\)&lt;/span&gt; but what we really want is a controller of the form &lt;span class="math"&gt;\(\frac{p^*(z)}{1 - z^{-1}}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;How can we convert from one to the other? Do we need to bring the controller into canonical form ?&lt;/p&gt;
&lt;p&gt;Since the &lt;tt class="docutils literal"&gt;canon()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;minreal()&lt;/tt&gt; forms are the same I'm not sure how to proceed.&lt;/p&gt;
&lt;p&gt;I've tried it by identification by hand but the results don't seem to match so I'm not sure what to do from there ...&lt;/p&gt;
&lt;p&gt;Also, in the paper, the Bode plots always refer to the control system. I assume that means the closed-loop control system. Am I right ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="progress-today"&gt;
&lt;h2&gt;Progress today:&lt;/h2&gt;
&lt;p&gt;I don't know shit.&lt;/p&gt;
&lt;p&gt;I wanted to check that my script was correctly implementing VRFT. To do that I needed to validate that the outputs of the &lt;tt class="docutils literal"&gt;VRFT1_dy&lt;/tt&gt; function were the same as the solution provided by the paper. Since the forms of the controllers are different I had to write the identification problem by hand and solve it.&lt;/p&gt;
&lt;p&gt;To validate that is worked I passed in the controller from the paper and check that is sat out the right parameters. I then passed in the OptimalController calculated by &lt;tt class="docutils literal"&gt;VRFT1_dy&lt;/tt&gt; and the parameters don't match ...&lt;/p&gt;
&lt;p&gt;The bode plots of the system are also out of whack ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps:&lt;/h2&gt;
&lt;p&gt;Go home, study discrete time systems and write a reference model by hand based on the requirements.&lt;/p&gt;
&lt;p&gt;Once I can generate a controller with VRFT I can schedule a meeting with prof.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>Remembering what's up</title><link href="http://thesis.comkieffer.com/remembering-whats-up.html" rel="alternate"></link><published>2016-03-15T00:00:00+01:00</published><updated>2016-03-15T00:00:00+01:00</updated><author><name>Tibo</name></author><id>tag:thesis.comkieffer.com,2016-03-15:remembering-whats-up.html</id><summary type="html">&lt;p&gt;Today I started working on my thesis again. I was hoping to make swift progress but as usual the minutiae will bog you down.&lt;/p&gt;
&lt;p&gt;I tried to replicate the examples from the papers. Both papers (A new approach, A direct method) use the same numerical example but present it differently and change one parameter (&lt;span class="math"&gt;\(\bar{\omega}\)&lt;/span&gt;). It also doesn't look like they are using the toolbox.
It didn't work.&lt;/p&gt;
&lt;p&gt;The Bode plot of the reference model and the plant model are correct but the generated controller isn't. The controller family is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C(z; \theta) = \frac{\theta_0 + \theta_1 z^{-1} + \theta_2 z^{-2} + \theta_3 z^{-3} + \theta_4 z^{-4} + \theta_5 z^{-5}}{1 - z^{-1}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;So the Controller family vector should be :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;c3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="n"&gt;c3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;c4&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="n"&gt;c4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;c5&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="n"&gt;c5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;c6&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;^&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="n"&gt;c6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'z^-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="n"&gt;c3&lt;/span&gt; &lt;span class="n"&gt;c4&lt;/span&gt; &lt;span class="n"&gt;c5&lt;/span&gt; &lt;span class="n"&gt;c6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;OptimalController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VRFT1_ry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RefModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Produces an optimal controller that has little to do with what I thought I put in.
The reason is that I'm dumb.&lt;/p&gt;
&lt;p&gt;The optimal controller is :&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C(z) = \beta^T(z) \cdot {\theta_n}^T
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Thus we need to split the controller into independent terms:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
C(z; \theta) = \frac{A_1}{1 - z^{-1}} + \frac{A_2}{1 - z^{-1}} + ... + \frac{A_6}{1 - z^{-1}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;I also started to look at the previous work to make a work plan. My predecessors made a :math`2^{nd}` order continuous time reference model that they then translated to discrete time with &lt;tt class="docutils literal"&gt;c2d&lt;/tt&gt;. I'd like to start y making a discrete time model and skip the continuous time model entirely.&lt;/p&gt;
&lt;p&gt;The controller is a simple PID. I need to brush up on the theory side of things to understand discrete time stuff better.&lt;/p&gt;
&lt;p&gt;Once I have the PID family set up I can generate the optimal controller and start thinking about the cascade problem.&lt;/p&gt;
&lt;p&gt;The objective is to have a proof of concept of the cascade set-up ASAP to show to the professor. I'll worry about noise later on.&lt;/p&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry></feed>